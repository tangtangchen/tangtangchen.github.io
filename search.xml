<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>并发编程</title>
      <link href="/posts/5.html"/>
      <url>/posts/5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h1><h2 id="并发编程的三个基本概念"><a href="#并发编程的三个基本概念" class="headerlink" title="并发编程的三个基本概念"></a>并发编程的三个基本概念</h2><p>原子性：即一个操作或者多个操作要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行；</p><p>可见性：指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值；</p><p>有序性：即程序执行的顺序按照代码的先后顺序执行。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程跟进程"><a href="#线程跟进程" class="headerlink" title="线程跟进程"></a>线程跟进程</h3><p>线程是进程划分成的更小的运行单位；</p><p>进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位；</p><p>一个进程中可以有多个线程，多个线程共享进程中的堆和方法区；线程私有自己的程序计数器、虚拟机栈和本地方法栈；</p><p>线程执行开销小，但不利于资源的管理和保护；而进程正相反。</p><h3 id="线程私有"><a href="#线程私有" class="headerlink" title="线程私有"></a>线程私有</h3><h4 id="程序计数器为什么是私有的"><a href="#程序计数器为什么是私有的" class="headerlink" title="程序计数器为什么是私有的"></a>程序计数器为什么是私有的</h4><p>线程切换后能恢复到正确的执行位置</p><h4 id="虚拟机栈和本地方法栈为什么是私有的"><a href="#虚拟机栈和本地方法栈为什么是私有的" class="headerlink" title="虚拟机栈和本地方法栈为什么是私有的"></a>虚拟机栈和本地方法栈为什么是私有的</h4><p>为了保证线程的局部变量不被其他线程访问到</p><h3 id="使用多线程"><a href="#使用多线程" class="headerlink" title="使用多线程"></a>使用多线程</h3><p>充分利用多核CPU的性能，提升系统的性能</p><h3 id="线程的生命周期和六种状态"><a href="#线程的生命周期和六种状态" class="headerlink" title="线程的生命周期和六种状态"></a>线程的生命周期和六种状态</h3><p>线程的生命周期中并不是固定处于某个状态，而是随着代码的执行在不同状态之间切换。</p><p>new：初始状态，线程被创建出来但是没有被调用start（）；</p><p>runnable：运行状态，线程被调用start（）等待被运行；</p><p>blocked：阻塞状态，等待锁释放；</p><p>waiting：等待状态，线程需要其他线程做出一些特定动作（通知或中断）</p><p>time_waiting：超时等待状态，可以在指定时间后自行返回，而非waiting那样一直等待；</p><p>terminated：终止状态，表示该线程已经运行完毕；</p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230821214408533.png" alt="image-20230821214408533"></p><p>新建状态（NEW）：</p><p>当程序使用 new 关键字创建了一个线程之后，该线程就处于新建状态，此时仅由 JVM 为其分配内存，并初始化其成员变量的值</p><p>就绪状态（RUNNABLE）：</p><p>当线程对象调用了 start()方法之后，该线程处于就绪状态。Java 虚拟机会为其创建方法调用栈和程序计数器，等待调度运行。</p><p>运行状态（RUNNING）：</p><p>如果处于就绪状态的线程获得了 CPU，开始执行 run()方法的线程执行体，则该线程处于运行状态。</p><p>阻塞状态（BLOCKED）：</p><p>阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice，暂时停止运行。 直到线程进入可运行(runnable)状态，才有机会再次获得 cpu timeslice 转到运行(running)状 态。阻塞的情况分三种：</p><p>等待阻塞（o.wait-&gt;等待对列）：</p><p>运行(running)的线程执行 o.wait()方法，JVM 会把该线程放入等待队列(waitting queue) 中。 </p><p>同步阻塞（lock-&gt;锁池）：</p><p>运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则 JVM 会把该线 程放入锁池(lock pool)中。</p><p>其他阻塞(sleep/join）：</p><p>运行(running)的线程执行 Thread.sleep(long ms)或 t.join()方法，或者发出了 I/O 请求时， JVM 会把该线程置为阻塞状态。当 sleep()状态超时、join()等待线程终止或者超时、或者 I/O 处理完毕时，线程重新转入可运行(runnable)状态。</p><p>线程死亡（DEAD）：</p><p>线程会以下面三种方式结束，结束后就是死亡状态。 </p><p>正常结束 </p><p>run()或 call()方法执行完成，线程正常结束。 </p><p>异常结束 </p><p>线程抛出一个未捕获的 Exception 或 Error。 </p><p>调用 stop 3. </p><p>直接调用该线程的 stop()方法来结束该线程—该方法通常容易导致死锁，不推荐使用</p><h3 id="终止线程4种方式"><a href="#终止线程4种方式" class="headerlink" title="终止线程4种方式"></a>终止线程4种方式</h3><ul><li>正常运行结束</li></ul><p>程序运行结束，线程自动结束。</p><ul><li>使用退出标志退出线程</li></ul><p>一般 run()方法执行完，线程就会正常结束，然而，常常有些线程是伺服线程。它们需要长时间的 运行，只有在外部某些条件满足的情况下，才能关闭这些线程。使用一个变量来控制循环</p><ul><li>Interrupt 方法结束线程</li></ul><p>使用 interrupt()方法来中断线程有两种情况：</p><p>1、线程处于阻塞状态：如使用了 sleep,同步锁的 wait,socket 中的 receiver,accept 等方法时， 会使线程处于阻塞状态。当调用线程的 interrupt()方法时，会抛出 InterruptException 异常。阻塞中的那个方法抛出这个异常，通过代码捕获该异常，然后 break 跳出循环状态，从而让我们有机会结束这个线程的执行。通常很多人认为只要调用 interrupt 方法线程就会结束，实际上是错的，一定要先捕获 InterruptedException 异常之后通过 break 来跳出循环，才能正常结束 run 方法。 </p><p>2、线程未处于阻塞状态：使用 isInterrupted()判断线程的中断标志来退出循环。当使用 interrupt()方法时，中断标志就会置 true，和使用自定义的标志来控制循环是一样的道理。</p><ul><li>stop 方法终止线程（线程不安全）</li></ul><p>程序中可以直接使用 thread.stop()来强行终止线程，但是 stop 方法是很危险的，就象突然关 闭计算机电源，而不是按正常程序关机一样，可能会产生不可预料的结果，不安全主要是： thread.stop()调用之后，创建子线程的线程就会抛出 ThreadDeatherror 的错误，并且会释放子 线程所持有的所有锁。一般任何进行加锁的代码块，都是为了保护数据的一致性，如果在调用 thread.stop()后导致了该线程所持有的所有锁的突然释放(不可控制)，那么被保护数据就有可能呈 现不一致性，其他线程在使用这些被破坏的数据时，有可能导致一些很奇怪的应用程序错误。因 此，并不推荐使用 stop 方法来终止线程。</p><h3 id="sleep-与-wait-区别"><a href="#sleep-与-wait-区别" class="headerlink" title="sleep 与 wait 区别"></a>sleep 与 wait 区别</h3><ol><li>对于 sleep()方法，我们首先要知道该方法是属于 Thread 类中的。而 wait()方法，则是属于 Object 类中的。 </li><li>  sleep()方法导致了程序暂停执行指定的时间，让出 cpu 该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。 </li><li>在调用 sleep()方法的过程中，线程不会释放对象锁。</li><li>而当调用 wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用 notify()方法后本线程才进入对象锁定池准备获取对象锁进入运行状态。</li></ol><h3 id="线程基本方法"><a href="#线程基本方法" class="headerlink" title="线程基本方法"></a>线程基本方法</h3><p>wait、sleep、notify、notifyAll、join、yield等</p><p><strong>wait</strong>：线程等待</p><p>调用该方法的线程进入WAITING状态，只有等待另外线程的通知或被中断才会返回，需要注意的是调用wait（）方法后，会释放对象的锁。因此，wait方法一般用在同步方法或同步代码块中。</p><p><strong>sleep</strong>：线程睡眠</p><p>sleep导致当前线程休眠，与wait方法不同的是sleep不会释放当前占有的锁，sleep（long）会导致线程进入TIMEED-WAITING状态</p><p><strong>yield</strong>：线程让步</p><p>yield会使当前线程让出CPU执行时间片，与其他线程一起重新竞争CPU时间片。</p><p><strong>interrupt</strong>：线程中断</p><p>中断一个线程，本意是给这个线程一个通知信号，会影响这个线程内部的一个中断标识位。这个线程本身并不会因此而改变状态（如阻塞，终止等）</p><ol><li>调用interrupt（）方法并不会中断一个正在运行的线程。也就是说处于Running状态的线程并不会因为被中断而被终止，仅仅改变了内部维护的中断标记位而已。</li><li>若调用sleep（）而使线程处于TIMED-WAITING状态，这是调用interrupt（）方法，会抛出InterruptedException，从而使线程提前结束TIMED-WAITING状态。</li><li>许多声明抛出 InterruptedException 的方法(如 Thread.sleep(long mills 方法))，抛出异常前，都会清除中断标识位，所以抛出异常后，调用 isInterrupted()方法将会返回 false。</li><li>中断状态是线程固有的一个标识位，可以通过此标识位安全的终止线程。比如,你想终止 一个线程 thread 的时候，可以调用 thread.interrupt()方法，在线程的 run 方法内部可以 根据 thread.isInterrupted()的值来优雅的终止线程。</li></ol><p><strong>Join</strong> ：等待其他线程终止</p><p>join() 方法，等待其他线程终止，在当前线程中调用一个线程的 join() 方法，则当前线程转为阻塞状态，直到另一个线程结束，当前线程再由阻塞状态变为就绪状态，等待 cpu 的宠幸。</p><p><strong>notify</strong>：线程唤醒</p><p>Object 类中的 notify() 方法，唤醒在此对象监视器上等待的单个线程，如果所有线程都在此对象 上等待，则会选择唤醒其中一个线程，选择是任意的，并在对实现做出决定时发生，线程通过调 用其中一个 wait() 方法，在对象的监视器上等待，直到当前的线程放弃此对象上的锁定，才能继 续执行被唤醒的线程，被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞 争。类似的方法还有 notifyAll() ，唤醒再次监视器上等待的所有线程。</p><p>其他方法： </p><ol><li>sleep()：强迫一个线程睡眠Ｎ毫秒。</li><li>isAlive()： 判断一个线程是否存活。</li><li>join()： 等待线程终止。 </li><li>activeCount()： 程序中活跃的线程数。</li><li>enumerate()： 枚举程序中的线程。 </li><li>currentThread()： 得到当前线程。 </li><li>isDaemon()： 一个线程是否为守护线程。</li><li>setDaemon()： 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线 程依赖于主线程结束而结束) </li><li>setName()： 为线程设置一个名称。</li><li>wait()： 强迫一个线程等待。</li><li>notify()： 通知一个线程继续运行。 </li><li>setPriority()： 设置一个线程的优先级。 </li><li>getPriority():：获得一个线程的优先级。</li></ol><h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p>假如发生某些情况时（让出CPU、时间片用完、中断），线程切换（保存当前线程上下文，留待下次占用CPU时恢复现场，加载下个占用CPU的线程上下文）。</p><p>巧妙地利用了时间片轮转的方式, CPU 给每个任务都服务一定的时间，然后把当前任务的状态保存 下来，在加载下一任务的状态后，继续服务下一任务，任务的状态保存及再加载, 这段过程就叫做 上下文切换。时间片轮转的方式使多个任务在同一颗 CPU 上执行变成了可能。</p><p>上下文 是指某一时间点 CPU 寄存器和程序计数器的内容</p><h2 id="Java锁"><a href="#Java锁" class="headerlink" title="Java锁"></a>Java锁</h2><h3 id="乐观锁（多读场景，竞争较少）："><a href="#乐观锁（多读场景，竞争较少）：" class="headerlink" title="乐观锁（多读场景，竞争较少）："></a>乐观锁（多读场景，竞争较少）：</h3><p>每次假设最好的情况，认为共享资源每次访问不会出问题，每次去拿数据的时候都认为别人不会修改，所以不会上锁，仅在修改更新的时候去会判断一下在此期间别人有没有去更新这个数 据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新）， 如果失败则要重复读-比较-写的操作。</p><p>不存在锁竞争，不会有死锁发生，但如果冲突频繁发生，会频繁的失败与重试，导致CPU飙升。</p><p>乐观锁一般会使用版本号机制或 CAS 算法实现（CAS 的全称是 <strong>Compare And Swap（比较与交换）</strong>）。</p><p>乐观锁存在的问题：</p><p>ABA问题、循环时间长开销大、只能保证一个共享变量的循环操作</p><h4 id="ABA解决方法"><a href="#ABA解决方法" class="headerlink" title="ABA解决方法"></a>ABA解决方法</h4><p>ABA问题就是变量V在初次读取时值为A，准备赋值时读取仍然为A，但是这并不代表中间并没有被改变过。</p><p>在变量前面加上<strong>时间戳</strong>或<strong>版本号</strong></p><h3 id="悲观锁（多写场景，竞争激烈）："><a href="#悲观锁（多写场景，竞争激烈）：" class="headerlink" title="悲观锁（多写场景，竞争激烈）："></a>悲观锁（多写场景，竞争激烈）：</h3><p>每次假设最坏的情况，每次去拿数据的时候都认为别人 会修改，所以每次在读写数据的时候都会上锁，这样别人想读写这个数据就会 block 直到拿到锁。（<strong>共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程</strong>）</p><p><strong>Java中的悲观锁就是Synchronized,AQS框架下的锁则是先尝试cas乐观锁去获取锁，获取不到，才会转换为悲观锁，如 RetreenLock。</strong></p><p>激烈的锁竞争会导致频繁的系统上下文切换，造成系统的性能开销，悲观锁可能会存在死锁问题；</p><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁 的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋）， 等持有锁的线程释放锁后即可立即获取锁，这样就避免用户线程和内核的切换的消耗。</p><p>线程自旋是需要消耗 cup 的，说白了就是让 cup 在做无用功，如果一直获取不到锁，那线程 也不能一直占用 cup 自旋做无用功，所以需要设定一个自旋等待的最大时间。</p><p>在 1.6 引入了适应性自旋锁，适应 性自旋锁意味着自旋的时间不在是固定的了，而是由前一次在同一个锁上的自旋时间以及锁的拥 有者的状态来决定，基本认为一个线程上下文切换的时间是最佳的一个时间</p><h3 id="Synchronized-同步锁"><a href="#Synchronized-同步锁" class="headerlink" title="Synchronized 同步锁"></a>Synchronized 同步锁</h3><p>synchronized 它可以把任意一个非 NULL 的对象当作锁。他属于独占式的悲观锁，同时属于可重入锁。</p><h4 id="Synchronized-核心组件"><a href="#Synchronized-核心组件" class="headerlink" title="Synchronized 核心组件"></a>Synchronized 核心组件</h4><ol><li>Wait Set:那些调用wait方法的线程被放置在这里</li><li>Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中</li><li>Entry List：Contention List中那些有资格成为候选资源的线程被移动到Entry List中；</li><li>OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被称为OnDeck</li><li>Owner：当前已经获取所有资源的线程被称为Owner</li><li>！Onwer：当前释放锁的线程</li></ol><h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>ReentantLock 继承接口 Lock 并实现了接口中定义的方法，他是一种可重入锁，除了能完成 synchronized 所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。</p><p>1、ReentrantLock 通过方法 lock()与 unlock()来进行加锁与解锁操作，与 synchronized 会 被 JVM 自动解锁机制不同，ReentrantLock 加锁后需要手动进行解锁。为了避免程序出现异常而无法正常解锁的情况，使用 ReentrantLock 必须在 finally 控制块中进行解锁操作。 </p><ol start="2"><li>ReentrantLock 相比 synchronized 的优势是可中断、公平锁、多个锁。这种情况下需要使用 ReentrantLock</li></ol><h3 id="Semaphore-信号量"><a href="#Semaphore-信号量" class="headerlink" title="Semaphore 信号量"></a>Semaphore 信号量</h3><p>Semaphore 是一种基于计数的信号量。它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还，超过阈值后，线程申请许可信号将会被阻塞。Semaphore 可以用来构建一些对象池，资源池之类的，比如数据库连接池</p><p>实现互斥锁（计数器为 1） 我们也可以创建计数为 1 的 Semaphore，将其作为一种类似互斥锁的机制，这也叫二元信号量， 表示两种互斥状态。</p><h4 id="Semaphore-与-ReentrantLock"><a href="#Semaphore-与-ReentrantLock" class="headerlink" title="Semaphore 与 ReentrantLock"></a>Semaphore 与 ReentrantLock</h4><p>Semaphore 基本能完成 ReentrantLock 的所有工作，使用方法也与之类似，通过 acquire()与 release()方法来获得和释放临界资源。经实测，Semaphone.acquire()方法默认为可响应中断锁，与 ReentrantLock.lockInterruptibly()作用效果一致，也就是说在等待临界资源的过程中可以被 Thread.interrupt()方法中断。 此外，Semaphore 也实现了可轮询的锁请求与定时锁的功能，除了方法名 tryAcquire 与 tryLock 不同，其使用方法与 ReentrantLock 几乎一致。Semaphore 也提供了公平与非公平锁的机制，也可在构造函数中进行设定。 Semaphore 的锁释放操作也由手动进行，因此与 ReentrantLock 一样，为避免线程因抛出异常而 无法正常释放锁的情况发生，释放锁的操作也必须在 finally 代码块中完成</p><h3 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h3><p>首先说明，此处 AtomicInteger ，一个提供原子操作的 Integer 的类，常见的还有 AtomicBoolean、AtomicInteger、AtomicLong、AtomicReference 等，他们的实现原理相同， 区别在与运算对象类型的不同。令人兴奋地，还可以通过 AtomicReference将一个对象的所 有操作转化成原子操作。 我们知道，在多线程程序中，诸如++i 或 i++等运算不具有原子性，是不安全的线程操作之一。 通常我们会使用 synchronized 将该操作变成一个原子操作，但 JVM 为此类操作特意提供了一些 同步类，使得使用更方便，且使程序运行效率变得更高。通过相关资料显示，通常AtomicInteger 的性能是 ReentantLock 的好几倍。</p><h3 id="ReadWriteLock-读写锁"><a href="#ReadWriteLock-读写锁" class="headerlink" title="ReadWriteLock 读写锁"></a>ReadWriteLock 读写锁</h3><p>为了提高性能，Java 提供了读写锁，在读的地方使用读锁，在写的地方使用写锁，灵活控制，如 果没有写锁的情况下，读是无阻塞的,在一定程度上提高了程序的执行效率。读写锁分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的，你只要上好相应的锁即可。 </p><p>读锁 </p><p>如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁 </p><p>写锁 </p><p>如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上 读锁，写的时候上写锁！ </p><p>ava 中 读 写 锁 有 个 接 口 java.util.concurrent.locks.ReadWriteLock ， 也 有 具 体 的 实 现 ReentrantReadWriteLock。</p><h3 id="共享锁和独占锁"><a href="#共享锁和独占锁" class="headerlink" title="共享锁和独占锁"></a>共享锁和独占锁</h3><p>java 并发包提供的加锁模式分为独占锁和共享锁。</p><p>独占锁 </p><p>独占锁模式下，每次只能有一个线程能持有锁，ReentrantLock 就是以独占方式实现的互斥锁。 独占锁是一种悲观保守的加锁策略，它避免了读/读冲突，如果某个只读线程获取锁，则其他读线程都只能等待，这种情况下就限制了不必要的并发性，因为读操作并不会影响数据的一致性。</p><p>共享锁</p><p>共享锁则允许多个线程同时获取锁，并发访问 共享资源，如：ReadWriteLock。共享锁则是一种乐观锁，它放宽了加锁策略，允许多个执行读操作的线程同时访问共享资源。</p><h3 id="分段锁"><a href="#分段锁" class="headerlink" title="分段锁"></a>分段锁</h3><p>分段锁也并非一种实际的锁，而是一种思想 ConcurrentHashMap 是学习分段锁的最好实践</p><h2 id="预防和避免死锁"><a href="#预防和避免死锁" class="headerlink" title="预防和避免死锁"></a>预防和避免死锁</h2><p>预防死锁：</p><p>​    破环请求与保持条件；</p><p>​    破环不剥夺条件；</p><p>​    破环循环等待条件；</p><p>避免死锁：</p><p>​    资源分配是使用-银行家算法；</p><h2 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a>synchronized 关键字</h2><p><a href="https://zhuanlan.zhihu.com/p/377423211">https://zhuanlan.zhihu.com/p/377423211</a></p><h3 id="synchronized-工作原理"><a href="#synchronized-工作原理" class="headerlink" title="synchronized 工作原理"></a>synchronized 工作原理</h3><p>synchronized是一个同步关键字，在多线程场景下，作用于代码同步保护数据共享安全。</p><p><code>synchronized</code> 关键字的使用方式主要有下面 3 种：</p><ol><li>修饰普通同步方法：锁对象就是当前实例</li><li>修饰静态同步方法：锁对象是当前类的Class字节码对象</li><li>修饰同步代码块：锁对象是synchronized后面括号里配置的对象，可以是某个对象，也可以是某个类的.class对象。</li></ol><p>JVM对于同步方法和同步代码块的处理方式不同，对于同步方法，JVM采用<code>ACC_SYNCHRONIZED</code>标记符来实现同步，而对于同步代码块，JVM则采用 <code>monitorenter</code>（加锁）和<code>monitorexit</code> （释放锁）这两个指令实现同步。</p><p>Java虚拟机是通过进入和退出Monitor对象来实现代码块同步和方法同步的，代码块同步使用的是<code>monitorenter</code>和 <code>monitorexit</code> 指令实现的，而方法同步是通过<code>Access flags</code>后面的标识来确定该方法是否为同步方法。</p><p>反汇编语言中有两个<code>monitorexit</code> 是为了执行异常的<code>monitorenter</code>指令。而字节码中多出的<code>monitorexit</code>指令，就是<strong>异常结束时</strong>，<strong>被执行用来释放</strong><code>monitor</code>的。</p><h3 id="synchronized特性"><a href="#synchronized特性" class="headerlink" title="synchronized特性"></a>synchronized特性</h3><p><strong>原子性</strong></p><p>原子性指的是在一次或多次操作中，要么所有的操作都执行并且不会受其他因素干扰而中断，要么所有的操作都不执行。</p><p>如何保证：</p><p>Java内存模型中提供了字节码指令<code>monitorenter</code>和<code>monitorexit</code> 来隐式的使用这两个操作，在<code>synchronized</code>块之间的操作都是具备原子性的。</p><p><strong>可见性</strong></p><p> 当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p><p>如何保证：</p><p>通过内存屏障。内存屏障按照可见性分为：<code>load屏障</code>和<code>Store屏障</code></p><p><code>load屏障</code>：执行refresh，从其他处理器的高速缓存、主内存，加载数据到自己的高速缓存，保证数据的最新。</p><p><code>Store屏障</code>：执行flush操作，自己处理器更新的变量值，刷新到高速缓存、主内存中。</p><p>被<code>synchronized</code>修饰的代码，在开始执行时被加锁，执行完毕后解锁，在解锁一个变量之前，必须先把<strong>此变量同步回主存</strong>，这样解锁以后，其他线程就可以访问到被修改后的值，从而保证可见性。</p><p><strong>有序性</strong></p><p>程序执行的顺序按照代码的先后顺序执行。</p><p>通过内存屏障。内存屏障按照有序性分为：<code>Acquire屏障</code>和<code>Release屏障</code></p><p><code>Acquire屏障</code>：load屏障之后，加Acquire屏障。它会禁止同步代码块内的读操作，和外面的读写操作发生指令重排；</p><p><code>Release屏障</code>：禁止写操作，和外面的读写操作发生指令重排；</p><p>在 monitorenter 指令和 Load 屏障之后，会加一个 Acquire屏障，这个屏障的作用是禁止同步代码块里面的读操作和外面的读写操作之间发生指令重排，在 monitorexit 指令前加一个Release屏障，也是禁止同步代码块里面的写操作和外面的读写操作之间发生重排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>synchronize <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//monitorenter</span>    <span class="token comment">// Load内存屏障</span>    <span class="token comment">// Acquire屏障，禁止代码块内部的读，和外面的读写发生指令重排</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//注意：内部还是会发生指令重排</span>    <span class="token comment">// Release屏障，禁止写，和外面的读写发生指令重排</span><span class="token punctuation">}</span> <span class="token comment">//monitorexit</span><span class="token comment">//Store内存屏障</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>as-if-serial，synchronized 的有序性，不是 volatile 的防止指令重排序。</p><p><strong>可重入性</strong></p><p>可重入指的就是一个线程可以多次执行synchronized，重复获取同一把锁。</p><h3 id="synchronized关键字可以实现什么类型的锁？"><a href="#synchronized关键字可以实现什么类型的锁？" class="headerlink" title="synchronized关键字可以实现什么类型的锁？"></a>synchronized关键字可以实现什么类型的锁？</h3><ul><li>悲观锁：<code>synchronized</code>关键字实现的是悲观锁，每次访问共享资源时都会上锁。</li><li>非公平锁：<code>synchronized</code>关键字实现的是非公平锁，即线程获取锁的顺序并不一定是按照线程阻塞的顺序。</li><li>可重入锁：<code>synchronized</code>关键字实现的是可重入锁，即已经获取锁的线程可以再次获取锁。</li><li>独占锁或者排他锁：<code>synchronized</code>关键字实现的是独占锁，即该锁只能被一个线程所持有，其他线程均被阻塞。</li></ul><h3 id="Synchronzied锁升级"><a href="#Synchronzied锁升级" class="headerlink" title="Synchronzied锁升级"></a>Synchronzied锁升级</h3><p>在jdk1.6之前，<code>synchronized</code>被称为重量级锁，在jdk1.6中，为了减少获得锁和释放锁带来的性能开销，引入了偏向锁和轻量级锁。</p><p>无锁-&gt;偏向锁（单线程）-&gt;轻量级锁（CAS自旋）-&gt;重量级锁（阻塞）</p><p><strong>为什么要进行锁优化呢</strong></p><p>JDK1.6之前是通过重量级锁方式去实现线程之间锁竞争的，重量级锁底层依赖操作系统的Mutex Lock来去实现互斥锁的一个功能 。Mutex是系统方法，由于权限隔离的关系，应用程序调用系统方法需要用户态切换到内核状态执行，带来性能上的损耗。</p><p>因为Java虚拟机是通过进入和退出Monitor对象来实现代码块同步和方法同步的，而Monitor是依靠底层操作系统的<code>Mutex Lock</code>来实现的，操作系统实现线程之间的切换需要从用户态转换到内核态，这个切换成本比较高，对性能影响较大</p><p><strong>引入偏向锁的目的</strong></p><p>减少只有一个线程执行同步代码块时的性能消耗，即在没有其他线程竞争的情况下，一个线程获得了锁。</p><p>偏向锁的获取流程：</p><ol><li>检查对象头中Mark Word是否为可偏向状态，如果不是则直接升级为轻量级锁。</li><li>如果是，判断Mark Work中的线程ID是否指向当前线程，如果是，则执行同步代码块。</li><li>如果不是，则进行CAS操作竞争锁，如果竞争到锁，则将Mark Work中的线程ID设为当前线程ID，执行同步代码块。</li><li>如果竞争失败，升级为轻量级锁。</li></ol><p>偏向锁原理：使用CAS操作将当前线程的ID记录到对象的Mark Word中。</p><p>引入轻量级锁的目的：在多线程交替执行同步代码块时（未发生竞争），避免使用互斥量（重量锁）带来的性能消耗。但多个线程同时进入临界区（发生竞争）则会使得轻量级锁膨胀为重量级锁。</p><p><strong>重量级锁的底部实现原理：Monitor</strong></p><p>在JDK1.6版本之后Synchronized增加锁升级的机制，来平衡数据安全性和性能的关系。简单来说，线程去访问Synchronized同步代码块的时候，Synchronized先去尝试在不加重量级锁的情况去保证线程安全性，引入了偏向锁和轻量级锁，偏向锁就是直接把当前锁偏向于某个线程，通过CAS机制来修改偏向锁的一个标记（Mark word中的线程ID改为当场线程ID），该锁适合同一线程多次去访问同一个锁资源的情况，并且没有其他线程竞争的一个场景中。轻量级锁又可以称为自旋锁，基于自适应自旋的机制，通过多次自旋去重试竞争锁（自旋次数过多就会升级到重量级锁），自旋锁的优点在于，避免了用户态到内核态切换带来的性能损耗。</p><p><img src="https://pic4.zhimg.com/v2-395840866ccb36a0f139903a7d5ada07_r.jpg" alt="img"></p><h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>锁消除是指Java虚拟机在即时编译时，通过对运行上下的扫描，消除那些不可能存在共享资源竞争的锁。锁消除可以节约无意义的请求锁时间。</p><h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>如果虚拟机检测到有一系列操作都是对某个对象反复加锁和解锁，会将加锁同步的范围粗化到整个操作序列的外部。</p><p>经典案例。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码会导致频繁地加锁和解锁，锁粗化后</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="synchronized和volatile的区别"><a href="#synchronized和volatile的区别" class="headerlink" title="synchronized和volatile的区别"></a>synchronized和volatile的区别</h3><ul><li><code>volatile</code>主要是保证内存的可见性，即变量在寄存器中的内存是不确定的，需要从主存中读取。<code>synchronized</code>主要是解决多个线程访问资源的同步性。</li><li><code>volatile</code>作用于变量，<code>synchronized</code>作用于代码块或者方法。</li><li><code>volatile</code>仅可以保证数据的可见性，不能保证数据的原子性。<code>synchronized</code>可以保证数据的可见性和原子性。</li><li><code>volatile</code>不会造成线程的阻塞，<code>synchronized</code>会造成线程的阻塞。</li></ul><h2 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h2><h3 id="volatile关键字是否保证可见性和原子性的原理"><a href="#volatile关键字是否保证可见性和原子性的原理" class="headerlink" title="volatile关键字是否保证可见性和原子性的原理"></a>volatile关键字是否保证可见性和原子性的原理</h3><p><strong>volatile</strong>关键字保证数据的可见性，无法保证数据的原子性；</p><p>将变量声明为 <strong><code>volatile</code></strong> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取；</p><p><strong>volatile</strong>是Java提供的一种轻量级的同步机制。Java 语言包含两种内在的同步机制：同步块（或方法）和 volatile 变量，相比于synchronized，volatile更轻量级；</p><p><code>volatile</code> 关键字除了可以保证变量的可见性，还有一个重要的作用就是防止 JVM 的指令重排序</p><h2 id="ReentrantLock-1"><a href="#ReentrantLock-1" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p><code>ReentrantLock</code>实现了Lock接口，是一个可重入且独占式锁（<strong>可重入锁</strong> 也叫递归锁，指的是线程可以再次获取自己的内部锁）。和<code>synchronized</code>关键字类似，而且更强大、更灵活，增加了轮询、超时、中断、公平锁、非公平锁等功能。</p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230803150547162.png" alt="image-20230803150547162"></p><p><code>ReentrantLock</code> 里面有一个内部类 <code>Sync</code>，<code>Sync</code> 继承 AQS（<code>AbstractQueuedSynchronizer</code>），添加锁和释放锁的大部分操作实际上都是在 <code>Sync</code> 中实现的。<code>Sync</code> 有公平锁 <code>FairSync</code> 和非公平锁 <code>NonfairSync</code> 两个子类。</p><p><code>ReentrantLock</code> 的底层就是由 AQS 来实现的。</p><h3 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h3><p><strong>公平锁</strong> : 锁被释放之后，先申请的线程先得到锁。性能较差一些，因为公平锁为了保证时间上的绝对顺序，上下文切换更频繁。</p><p><strong>非公平锁</strong>：锁被释放之后，后申请的线程可能会先获取到锁，是随机或者按照其他优先级排序的。性能更好，但可能会导致某些线程永远无法获取到锁。</p><h3 id="ReentrantLock和synchronized区别"><a href="#ReentrantLock和synchronized区别" class="headerlink" title="ReentrantLock和synchronized区别"></a>ReentrantLock和synchronized区别</h3><ul><li>二者都是可重入锁</li><li><code>ReentrantLock</code>依赖JDK（API）实现，<code>synchronized</code>依赖JVM实现</li><li>前者功能更加强大</li><li>前者实现了公平锁，后者只有非公平锁</li><li>前者实现了可中断锁，后者无</li></ul><p><strong>可中断锁</strong>：获取锁的过程中可以被中断，不需要一直等到获取锁之后 才能进行其他逻辑处理。<code>ReentrantLock</code> 就属于是可中断锁。</p><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>AQS就是一个抽象类，主要用来构建锁和同步器，为锁和同步器提供一些实现。</p><h3 id="AQS原理"><a href="#AQS原理" class="headerlink" title="AQS原理"></a>AQS原理</h3><p>如果被请求的共享资源空闲，那么将这个请求线程作为工作线程，将共享资源设为独占资源。<strong>如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制就是AQS基于CLH锁实现的。</strong></p><p>CLH锁：是对自旋锁的一种改进，是一个虚拟的双向队列，暂时获得不到锁的线程会加入到该队列中。</p><h4 id="AQS两种资源共享方式"><a href="#AQS两种资源共享方式" class="headerlink" title="AQS两种资源共享方式"></a>AQS两种资源共享方式</h4><ol><li><code>Exclusive</code>。（独占，只有一个线程能执行，如<code>ReentrantLock</code>）</li><li><code>Share</code>。（共享，多个线程同时执行，如<code>Semaphore/CountDownLatch</code>）</li></ol><p>同时实现两种资源共享方式的，如<code>ReentrantReadWriteLock</code>。</p><h4 id="基于AQS的常见同步类"><a href="#基于AQS的常见同步类" class="headerlink" title="基于AQS的常见同步类"></a>基于AQS的常见同步类</h4><p><strong>Semaphore（信号量）</strong></p><p><code>Semaphore</code>(信号量)可以用来控制同时访问特定资源的线程数量。</p><p><strong>CountDownLatch （倒计时器）</strong></p><p><code>CountDownLatch</code> 允许 <code>count</code> 个线程阻塞在一个地方，直至所有线程的任务都执行完毕。</p><p><strong>CyclicBarrier(循环栅栏)</strong></p><p>让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活。</p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p><code>ThreadLocal</code>类主要解决的就是让每个线程绑定自己的值，可以将<code>ThreadLocal</code>类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据。</p><p><img src="https://javaguide.cn/assets/1-af0577dc.png" alt="img"></p><h2 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h2><ol><li>继承Thread类：自己的类没有继承类就可以通过继承Thread类创建线程，Thread类本质上是实现了Runnable接口的一个实例。启动线程的唯一方法是通过Thread类的start（）方法，start（）方法是一个native方法，它启动线程并执行run（）方法。</li><li>实现Runnable接口：当自己的类已经继承了另一个类，就无法直接继承Thread类，此时可以通过实现Runnable接口方式创建线程。首先先需要实例化Thread，将自己的MyThread实例传入</li><li>实现Callable接口：<strong>有返回值的任务必须实现Callable接口，并可以抛出异常，无返回值的任务必须实现Runnable接口</strong>。执行Callable任务后可以获得一个Future对象，该对象上调用get就可以得到Callable任务返回的Object，再结合线程池接口ExecutorService就可以实现有返回结果的多线程。</li><li>线程池方式创建：为了避免重复创建销毁，采用此方式。Java提供了构建线程池的方式（Executors类）</li></ol><p>注：继承Thread实际上就是实现Runable，</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="创建线程池"><a href="#创建线程池" class="headerlink" title="创建线程池"></a>创建线程池</h3><ol><li><strong>通过<code>ThreadPoolExecutor</code>构造函数创建</strong>（推荐手动创建线程池）</li><li><strong>通过<code>Executor</code>框架的工具类<code>Executors</code>来创建</strong>（规范中不推荐这种方式去创建线程池，因为这种方式对线程的控制粒度比较低，导致OOM）</li></ol><h4 id="JDK基于Executors提供的5种线程池"><a href="#JDK基于Executors提供的5种线程池" class="headerlink" title="JDK基于Executors提供的5种线程池"></a>JDK基于Executors提供的5种线程池</h4><ul><li><code>newSingleThreadExecutor</code>：创建一个单线程的线程池，此线程池保证所有任务的执行顺序按照任务的提交顺序执行。（单例线程池）</li><li><code>newFixedThreadPool</code>：创建固定大小的线程池，每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。（定长线程池） </li><li><code>newCachedThreadPool</code>：创建一个可缓存的线程池，此线程池不会对线程池大小做限制，线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。 （缓存线程池，没有核心线程）</li><li><code>newWorkStealingPool</code>：创建一个单线程的线程池。此线程池支持定时以及周期性执行任务的需求。（工作窃取线程池）</li><li><code>newScheduleThreadPool</code>：（定时任务线程池，每个线程都有自己的阻塞队列，当自己的阻塞队列满了时，会去其他线程的阻塞队列窃取）</li></ul><h3 id="线程池的七个参数"><a href="#线程池的七个参数" class="headerlink" title="线程池的七个参数"></a>线程池的七个参数</h3><p>手动创建线程池，要对线程池的七个参数有所了解</p><p><code>corePoolSize</code>：核心线程数</p><p><code>maximumPoolSize</code>：最大线程数</p><p><code>keepAliveTime</code>：最大空闲时间</p><p>空闲时间内没有新任务，此 线程资源会释放</p><p><code>unit</code>： 时间单位</p><p>空闲时间单位，如秒、毫秒等</p><p><code>workQueue</code>：阻塞队列</p><p>当核心线程都在运行时，来任务就加入到其中</p><p><code>ThreadFactoty</code>：线程工厂</p><p>给线程指定名称，当线程出现问题时，可以直接锁定发生位置</p><p><code>handler</code> ：拒绝策略：</p><p>当所有线程都在繁忙，workQueue 也放满时，会触发拒绝 策略</p><h3 id="核心参数该如何设置"><a href="#核心参数该如何设置" class="headerlink" title="核心参数该如何设置"></a>核心参数该如何设置</h3><h3 id="线程池的饱和（拒绝）策略"><a href="#线程池的饱和（拒绝）策略" class="headerlink" title="线程池的饱和（拒绝）策略"></a>线程池的饱和（拒绝）策略</h3><ol><li><p>AbortPolicy：直接丢弃任务，抛出异常，这是默认策略</p></li><li><p>CallerRunsPolicy：只用调用者所在的线程来处理任务 </p></li><li><p>DiscardOldestPolicy：丢弃等待队列中最旧的任务，并执行当前任务 </p></li><li><p>DiscardPolicy：直接丢弃任务，也不抛出异常</p></li></ol><h3 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h3><p>线程池的核心属性就是ctl，基于ctl拿到<strong>线程池的状态</strong>以及<strong>工作线程的个数</strong></p><p>ctl实际上是一个32位的int类型，高三位为线程池状态，低29位是工作线程个数</p><p>五个状态：</p><p>111：RUNNING状态，RUNNING 可以处理任务，并且处理阻塞队列中的任务</p><p>000：SHUTDOWN状态，不会接收新任务，正在处理的任务正常进行，阻塞队列的任务也会做完</p><p>001：STOP状态，不会接受新任务，正在处理任务的线程会被中断，阻塞队列的任务一个不管</p><p>010：TIDYING状态，这个状态是SHUTDOWN或者STOP转换过来的，代表当前线程池马上关闭，就是过渡状态</p><p>011：TERMINATED状态，这个状态是TIDYING状态转换过来的，转换过来只需要执行一个terminated方法。</p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230821203650414.png" alt="image-20230821203650414"></p><p>其中正在处理任务的线程会被中断，不一定保证中断，看任务逻辑中是否有线程中断标记位的出口，有则中断</p><h3 id="线程池为何要构建空任务的非核心线程"><a href="#线程池为何要构建空任务的非核心线程" class="headerlink" title="线程池为何要构建空任务的非核心线程"></a>线程池为何要构建空任务的非核心线程</h3><p>核心线程为0，阻塞队列有任务，导致任务饥饿</p><p>导致这种情况发生有两种：</p><ol><li>创建线程池时设置核心线程数量为0</li><li>核心线程默认是不可以超时的，但是可以修改属性<code>allowCoreThreadTimeOut</code>为true，可以超时</li></ol><h3 id="线程池处理任务流程"><a href="#线程池处理任务流程" class="headerlink" title="线程池处理任务流程"></a>线程池处理任务流程</h3><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230803161712295.png" alt="image-20230803161712295"></p><ol><li>如果当前运行的线程数小于核心线程数，那么就会新建一个线程来执行任务。</li><li>如果当前运行的线程数等于或大于核心线程数，但是小于最大线程数，那么就把该任务放入到任务队列里等待执行。</li><li>如果向任务队列投放任务失败（任务队列已经满了），但是当前运行的线程数是小于最大线程数的，就新建一个线程来执行任务。</li><li>如果当前运行的线程数已经等同于最大线程数了，新建线程将会使当前运行的线程超出最大线程数，那么当前任务会被拒绝，饱和策略会调用<code>RejectedExecutionHandler.rejectedExecution()</code>方法。</li></ol><h3 id="线程池核线程数配置"><a href="#线程池核线程数配置" class="headerlink" title="线程池核线程数配置"></a>线程池核线程数配置</h3><p>分为<strong>CPU密集型</strong>和<strong>IO密集型</strong></p><p>CPU密集型： N（CPU 核心数）+1</p><p>IO密集型：CPU核心数量*2。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Future类"><a href="#Future类" class="headerlink" title="Future类"></a>Future类</h2><p><code>Future</code> 类是异步思想的典型运用，主要用在一些需要执行耗时任务的场景，避免程序一直原地等待耗时任务执行完成，执行效率太低。</p><p>核心思想是<strong>异步调用，主要用在多线程领域</strong>，并非 Java 语言独有。</p><h2 id="Executor框架"><a href="#Executor框架" class="headerlink" title="Executor框架"></a>Executor框架</h2><p>Java5引进的，通过<code>Executor</code>来启动线程比<code>Thread</code>的<code>start</code>方法更好。更易管理，效率更好（用线程池实现），关键：有助于避免this逃避问题。</p><p>this逃避问题：指在构造函数返回之前其他线程就持有该对象的引用，调用尚未构造完全的对象的方法可能引发令人疑惑的错误。</p><p>Executor框架组成：</p><ol><li><strong>任务</strong>：实现Runable和callable接口</li><li><strong>任务的执行</strong>：Executor</li><li><strong>异步计算的结果</strong>：Future</li></ol><h2 id="Java常见并发容器"><a href="#Java常见并发容器" class="headerlink" title="Java常见并发容器"></a>Java常见并发容器</h2><p><code>ConcurrentHashMap</code>：线程安全的 <code>HashMap</code>。</p><p><strong><code>CopyOnWriteArrayList</code></strong> : 线程安全的 <code>List</code>，在读多写少的场合性能非常好，远远好于 <code>Vector</code>。</p><p><strong><code>ConcurrentLinkedQueue</code></strong>: 高效的并发队列，使用链表实现。可以看做一个线程安全的 <code>LinkedList</code>，这是一个非阻塞队列。</p><p><strong><code>BlockingQueue</code></strong> : 这是一个接口，JDK 内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。</p><p><strong><code>ConcurrentSkipListMap</code></strong>: 跳表的实现。这是一个 Map，使用跳表的数据结构进行快速查找。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h1><p><img src="https://oss.javaguide.cn/github/javaguide/java/collection/java-collection-hierarchy.png" alt="Java 集合框架概览"></p><p><img src="https://img-blog.csdn.net/2018091021263378?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlZmVuZ2xpYW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="List，Set-，Queue；Map"><a href="#List，Set-，Queue；Map" class="headerlink" title="List，Set ，Queue；Map"></a>List，Set ，Queue；Map</h2><p><strong>List</strong>（对付顺序）：存储元素是有序的、可重复的；</p><p>​        底层数据结构</p><p>​                <code>ArrayList：Object【】</code>数组               （线程不安全）</p><p>​                <code>Vector：Object【】</code>数组                    （线程安全，使用<code>synchronized</code> 关键字；<code>Vector</code>和<code>Stack</code>已经被淘汰，推荐使用并发集合类（例如<code>ConcurrentHashMap、CopyOnWriteArrayList</code>）</p><p>​                <code>LinkedList</code>：双向链表        （线程不安全）</p><p><strong>Set</strong>（注重独一无二的性质）：存储元素是无序的、不可重复的；</p><p>​        底层数据结构</p><p>​                HashSet（无序、唯一）：基于<code>HashMap</code>实现，哈希表            （线程不安全）</p><p>​                LinkedHashSet：是<code>HashSet</code>的子类，内部通过<code>LinkHashMap</code>实现，链表+哈希表         （线程不安全）</p><p>​                TreeSet（有序、唯一）：红黑树        （线程不安全）</p><p><strong>Queue</strong>（实现排队功能的叫号机）：先确定前后顺序，存储的元素有序、不可替代；</p><p>​        底层数据结构</p><p>​                <code>PriorityQueue：Obeject【】</code>数组实现二叉堆</p><p>​                <code>ArrayQueue：Object【】</code> 数组 +  双指针</p><p><strong>Map</strong>（用<code>key</code>来搜索）：使用键值对存储，<code>key</code>是无序的、不可重复的，<code>value</code>是无序的、可重复的；</p><p>​        底层数据结构</p><p>​                <code>HashMap</code>：数据+链表——（解决哈希冲突方法变化）—–》数组+链表/红黑树            （线程不安全）</p><p>​                <code>LinkedHashMap</code>：继承<code>HashMap</code>, 数组+链表/红黑树          （线程不安全）</p><p>​                <code>TreeMap</code>：红黑树          (线程不安全)</p><p>​                <code>Hashtable</code>：数组+链表组成的，数组是 <code>Hashtable</code> 的主体，链表则是主要为了解决哈希冲突而存在的，经过了synchronized的修饰     （线程安全）</p><h2 id="HashMap扩容原理"><a href="#HashMap扩容原理" class="headerlink" title="HashMap扩容原理"></a>HashMap扩容原理</h2><p>HashMap默认的初始化大小为16，之后每次扩容，容量会变为原来的2倍。创建时如果给定了容量初始值，hashmap会将其扩容到2的幂次方大小；</p><h3 id="必须为2的幂次方原因"><a href="#必须为2的幂次方原因" class="headerlink" title="必须为2的幂次方原因"></a>必须为2的幂次方原因</h3><p>因为在hashMap的length等于2的n次方的时候，才会有(取模运算优化)hash%length==hash&amp;(length-1)，哈希算法的目的是为了加快哈希计算以及减少哈希冲突，所以此时&amp;操作更合适，所以在length等于2的幂次方的时候，可以使用&amp;操作加快操作且减少冲突，所以hashMap长度是2的幂次方</p><h2 id="HashMap的负载因子为何默认是0-75"><a href="#HashMap的负载因子为何默认是0-75" class="headerlink" title="HashMap的负载因子为何默认是0.75"></a>HashMap的负载因子为何默认是0.75</h2><p>负载因子是0.75的时，空间利用率比较高，而且避免了相当多的Hash冲突，使得底层的链表或者是红黑树的高度比较低，提升了空间效率；</p><h2 id="HashMap-Hashtable的键值是否能为null"><a href="#HashMap-Hashtable的键值是否能为null" class="headerlink" title="HashMap/Hashtable的键值是否能为null"></a>HashMap/Hashtable的键值是否能为null</h2><p>HashMap可以，但Hashtable不行。会报NPE（空指针异常）。</p><p>所以集合转Map时，一定要注意value值为null时会报NPE异常。</p><h2 id="链表超过8变成红黑树"><a href="#链表超过8变成红黑树" class="headerlink" title="链表超过8变成红黑树"></a>链表超过8变成红黑树</h2><p>【链表超过8变成红黑树，那红黑树转化为链表的话阈值还是8吗？】</p><p>当链表长度大于8的时候，如果当前数组的长度小于64，那么先进行数组扩容；大于64时，转换为红黑树；</p><h2 id="数组、链表、红黑树"><a href="#数组、链表、红黑树" class="headerlink" title="数组、链表、红黑树"></a>数组、链表、红黑树</h2><p>【数组、链表、红黑树什么情况下会有共存的状态？共存在的话是几种？三种可以同时存在一个hashmap里是吧？】</p><p>ConcurrentHashMap采用 <code>Node + CAS + synchronized</code> 来保证并发安全。数据结构跟 <code>HashMap</code> 1.8 的结构类似，数组+链表/红黑二叉树，Node 只能用于链表的情况，红黑树的情况需要使用 **<code>TreeNode</code>**。当冲突链表达到一定长度时，链表会转换成红黑树。</p><h2 id="集合转换"><a href="#集合转换" class="headerlink" title="集合转换"></a>集合转换</h2><h3 id="集合转Map"><a href="#集合转Map" class="headerlink" title="集合转Map"></a>集合转Map</h3><p>使用<code>Collectors</code>类的<code>toMap（）</code>方法</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/posts/2.html"/>
      <url>/posts/2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="Java中int跟Integer的区别"><a href="#Java中int跟Integer的区别" class="headerlink" title="Java中int跟Integer的区别"></a>Java中int跟Integer的区别</h2><p>int是基本数据类型，Integer则是包装类型；后者可以用于泛型；</p><p>前者有默认值且不是null，后者不赋值就是null；</p><p>比较方式不同，对于基本数据类型来说，“==”比较的是值，而对于包装数据类型 “ ==”比较的是对象的内存地址。</p><table><thead><tr><th align="center">基本类型</th><th align="center">位数</th><th align="center">字节</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center">int</td><td align="center">32</td><td align="center">4</td><td align="center">0</td></tr><tr><td align="center">short</td><td align="center">16</td><td align="center">2</td><td align="center">0</td></tr><tr><td align="center">long</td><td align="center">64</td><td align="center">8</td><td align="center">0L</td></tr><tr><td align="center">byte</td><td align="center">8</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">char</td><td align="center">16</td><td align="center">2</td><td align="center">‘u0000’</td></tr><tr><td align="center">float</td><td align="center">32</td><td align="center">4</td><td align="center">0f</td></tr><tr><td align="center">double</td><td align="center">64</td><td align="center">8</td><td align="center">0d</td></tr><tr><td align="center">boolean</td><td align="center">1</td><td align="center"></td><td align="center">false</td></tr></tbody></table><h2 id="包装类型的常量池技术"><a href="#包装类型的常量池技术" class="headerlink" title="包装类型的常量池技术"></a>包装类型的常量池技术</h2><p>字符串的创建耗费大量的时间和空间，频繁创建字符串影响程序性能。创建字符串时，首先会判断字符串常量池是否有该字符串，如果有直接引用，没有才会实例化字符串，并放入常量池。（<strong>包装类默认创建的缓存数据只适用与[-128.127]这个范围，若超出任然会去创建新的对象</strong>）</p><h3 id="有包装类型的原因："><a href="#有包装类型的原因：" class="headerlink" title="有包装类型的原因："></a>有包装类型的原因：</h3><p>包装类型可以用于泛型，基本数据类型不行</p><h3 id="包装类型的缓存机制"><a href="#包装类型的缓存机制" class="headerlink" title="包装类型的缓存机制:"></a>包装类型的缓存机制:</h3><p>Byte、Integer、Short、Long这四种包装类型默认创建了数值【-128，127】的相应类型的缓存数据，</p><p>Character创建了数值在【0，127】范围的缓存数据，</p><p>Boolean<code>直接返回</code>True<code>or</code>False，</p><p>两种浮点数类型的包装类 <code>Float</code>,<code>Double</code> 并没有实现缓存机制</p><h2 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h2><p>基本类型与包装类型的互换；</p><p>装箱就是用了包装类的<code>valueOf（）</code>方法；拆箱就是调用了<code>xxxValue（）</code>方法；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span> 等价于 <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">int</span> n <span class="token operator">=</span> i 等价于 <span class="token keyword">int</span> n <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="自动拆箱引发的-NPE（空指针异常）-问题"><a href="#自动拆箱引发的-NPE（空指针异常）-问题" class="headerlink" title="自动拆箱引发的 NPE（空指针异常） 问题"></a>自动拆箱引发的 NPE（空指针异常） 问题</h2><p>数据库查询为null，自动拆箱，用基本数据类型接受有NPE风险；</p><p>使用三目运算符不当会导致NPE异常；</p><h2 id="跟equals的区别"><a href="#跟equals的区别" class="headerlink" title="==跟equals的区别"></a>==跟equals的区别</h2><p>对于基本数据类型，==比较的是值，对于引用数据类型， ==比较的是对象的内存地址，eqials比较的是内容；</p><p>equals方法主要用于两个对象之间，检测一个对象是否等于另一个对象：</p><ul><li>情况1，类没有重写equals()方法。则通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象。（如Object类没有重写，String类重写了）</li><li>情况2，类重写了equals()方法。一般，我们都重写equals()方法来比较两个对象的内容是否相等；</li></ul><h2 id="String、StringBuffer、StringBuilder-的区别"><a href="#String、StringBuffer、StringBuilder-的区别" class="headerlink" title="String、StringBuffer、StringBuilder 的区别"></a>String、StringBuffer、StringBuilder 的区别</h2><p>线程安全：String、StringBuffer     线程不安全：StringBuilder</p><p>可变性：StringBuffer、StringBuilder   不可变： String</p><p>（String类中使用final关键字修饰字符数组来保存字符串，所以String对象不可变）</p><p>性能：StringBuilder&gt;StringBuffer&gt;String</p><p>(String类改变都会生成一个新的对象，而StringBuffer每次都对 对象 本身进行操作)</p><p><code>String</code> 真正不可变有下面几点原因：</p><ol><li>保存字符串的数组被 <code>final</code> 修饰且为私有的，并且<code>String</code> 类没有提供/暴露修改这个字符串的方法。</li><li><code>String</code> 类被 <code>final</code> 修饰导致其不能被继承，进而避免了子类破坏 <code>String</code> 不可变。</li></ol><p>（直接修改，其实它们已经是指向了一个新的对象）</p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230531145433052.png" alt="image-20230531145433052"></p><h3 id="String类为什么设置成不可变的"><a href="#String类为什么设置成不可变的" class="headerlink" title="String类为什么设置成不可变的"></a>String类为什么设置成不可变的</h3><p>设置成不可变的总共有四个好处：</p><p>1.字符串常量池的实现</p><p>通过字符串常量池，我们就可以节约大量的内存空间。如果不设置为不可变，字符串不可复用。</p><p>2.用作HashMap的key</p><p>String是不可变的可以很方便的用作HashMap的key；</p><p>对于HashMap的工作原理是哈希函数，会通过哈希函数计算的值去找到对于的value，如果String为可变的，改变其值之后，哈希值就变化了，会找不到对应的value。</p><p>3.用于缓存HashCode</p><p>4.线程安全</p><p>不可变的对象一定是线程安全的，可以安全的被多个线程共享。</p><h3 id="字符串拼接用“-”-还是-StringBuilder"><a href="#字符串拼接用“-”-还是-StringBuilder" class="headerlink" title="字符串拼接用“+” 还是 StringBuilder"></a>字符串拼接用“+” 还是 StringBuilder</h3><p>在JDK9之前，每次使用“+”号相当于自动创建了 <code>StringBuilder</code>进行拼接，实际上是通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个 <code>String</code> 对象 。。但是这种使用在循环中不合适，每次循环都会创建一个 <code>StringBuilder</code>对象，影响性能。</p><p>在JDK9之后，“+”改用动态方法<code>makeConcatWithConstants（）</code>实现，而不是大量的 <code>StringBuilder</code>。</p><h2 id="重载和重写"><a href="#重载和重写" class="headerlink" title="重载和重写"></a>重载和重写</h2><p>重载：</p><p>发生在同一个类中（或者父类和子类之间），方法名相同，参数类型不同、个数不同、顺序不同、方法返回值和访问修饰符可以不同。</p><p>（<strong>重载就是同一个类多个同名方法根据不同的传参来执行不同的逻辑处理</strong>）</p><p>重写：</p><p>重写发生在运行期间，是子类对父类的允许访问的方法的实现过程进行重新编写。（<strong>外部样子不能改变，内部逻辑可以改变</strong>）</p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230531150025204.png" alt="image-20230531150025204"></p><h2 id="构造器（constructor）是否可被重写（override）"><a href="#构造器（constructor）是否可被重写（override）" class="headerlink" title="构造器（constructor）是否可被重写（override）"></a>构造器（constructor）是否可被重写（override）</h2><p>构造器不能被继承，所以不能被重写，但是可以被重载；</p><p>每一个类必须有自己的构造函数，负责构造自己这部分的构造。子类不会覆盖父类的构造函数，相反必须一开始调用父类的构造函数。</p><h2 id="接口和抽象类有什么不同"><a href="#接口和抽象类有什么不同" class="headerlink" title="接口和抽象类有什么不同"></a>接口和抽象类有什么不同</h2><p>接口中的成员变量只能是 <code>public static final</code> 类型的，不能被修改且必须有初始值，而抽象类的成员变量默认 default，可在子类中被重新定义，也可被重新赋值。</p><h2 id="浅拷贝和深拷贝（对象拷贝）"><a href="#浅拷贝和深拷贝（对象拷贝）" class="headerlink" title="浅拷贝和深拷贝（对象拷贝）"></a>浅拷贝和深拷贝（对象拷贝）</h2><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230802103247804.png" alt="image-20230802103247804"></p><p>上图为引用拷贝，不属于浅拷贝和深拷贝，两个变量此时指向同一个对象，任意一个变量操作了对象的属性，都会发生改变。</p><p>浅拷贝：</p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230802103620999.png" alt="image-20230802103620999"></p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230802103641085.png" alt="image-20230802103641085"></p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230802104106289.png" alt="image-20230802104106289"></p><p>两个变量指向不同的对象，各自改变自己的属性，不影响另一个对象。但如果拷贝的对象中有属性属于引用数据类型，浅拷贝则仅负责引用数据类型的引用地址。</p><p>深拷贝：</p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230802104217596.png" alt="image-20230802104217596"></p><h2 id="Object-类的常见方法"><a href="#Object-类的常见方法" class="headerlink" title="Object 类的常见方法"></a>Object 类的常见方法</h2><p>clone（）：拷贝一份对象；</p><p>wait（）：等待一份线程；</p><p>hashCode（）：返回对象的哈希值；</p><p>getclass（）：获得当前对象的class对象；</p><p>equals（）：object类没有重写，与==相同；String类重写，比较引用对象的值；</p><p>notify（）：唤醒一份线程；</p><p>finalize（）：实例被垃圾回收的时候触发；</p><h2 id="Java-异常类层次结构图"><a href="#Java-异常类层次结构图" class="headerlink" title="Java 异常类层次结构图"></a>Java 异常类层次结构图</h2><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230802115715450.png" alt="image-20230802115715450"></p><p><strong>Checked Exception</strong> 即 <strong>受检查异常</strong> ，Java 代码在编译过程中，如果受检查异常没有被 <code>catch</code>或者<code>throws</code> 关键字处理的话，就没办法通过编译。</p><p><strong>Unchecked Exception</strong> 即 <strong>不受检查异常</strong> ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。</p><h2 id="Java-反射"><a href="#Java-反射" class="headerlink" title="Java 反射"></a>Java 反射</h2><h3 id="反射有什么优点-缺点"><a href="#反射有什么优点-缺点" class="headerlink" title="反射有什么优点/缺点"></a>反射有什么优点/缺点</h3><p>通过反射可以获取任意一个类的所有属性和方法，还可以调用这些属性和方法。</p><p>优点：可以让代码变得更加灵活，为各种框架提供开箱即用的功能提供了便利</p><p>缺点：让我们在运行时有了分析操作类的能力，同时也增加了安全问题，例如可以无视泛型参数的安全检查。</p><p>框架中大量使用了动态代理，而动态代理的实现也依赖反射。</p><h3 id="获得class对象的方式"><a href="#获得class对象的方式" class="headerlink" title="获得class对象的方式"></a>获得class对象的方式</h3><ul><li>通过 <code>Class.forName()</code>传入类的全路径获取</li><li>通过对象实例<code>instance.getClass()</code>获取</li><li>通过类加载器<code>xxxClassLoader.loadClass()</code>传入类路径获取</li></ul><h2 id="Java-泛型"><a href="#Java-泛型" class="headerlink" title="Java 泛型"></a>Java 泛型</h2><h3 id="泛型的作用"><a href="#泛型的作用" class="headerlink" title="泛型的作用"></a>泛型的作用</h3><p>泛型是JDK5引入的新特性。</p><p>编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。</p><p>泛型使用方式：泛型类、泛型接口、泛型方法。</p><h3 id="泛型类型擦除"><a href="#泛型类型擦除" class="headerlink" title="泛型类型擦除"></a>泛型类型擦除</h3><p>类型擦除：<strong>Java的泛型是伪泛型，因为Java在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说的类型擦除</strong>。</p><p>泛型本质上其实还是编译器的行为，为了保证引入泛型机制但不创建新的类型，减少虚拟机的运行开销，编译器通过擦除将泛型类转化为一般类。</p><p><strong>既然编译器要把泛型擦除，那为什么还要用泛型呢？用 Object 代替不行吗？</strong></p><p>● 使用 Object 类型需要手动添加强制类型转换，降低代码可读性，提高出错概率。 </p><p>● 泛型可以使用自限定类型如 T extends Comparable 。 </p><h3 id="泛型有哪些限制"><a href="#泛型有哪些限制" class="headerlink" title="泛型有哪些限制"></a>泛型有哪些限制</h3><p><strong>无边界的通配符</strong>：**&lt;?&gt;**       <strong>固定上边界的通配符</strong>：**&lt;? extends E&gt;**       <strong>固定下边界的通配符</strong>： <strong>&lt;? super E&gt;</strong> </p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230531152433617.png" alt="image-20230531152433617"></p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><h4 id="通配符-？和泛型-T-区别"><a href="#通配符-？和泛型-T-区别" class="headerlink" title="通配符 ？和泛型 T 区别"></a>通配符 ？和泛型 T 区别</h4><ul><li><strong>T</strong> 可以用于声明变量或常量而 <strong>?</strong> 不行。</li><li><strong>T</strong> 一般用于声明泛型类或方法，通配符 <strong>?</strong> 一般用于泛型方法的调用代码和形参。</li><li><strong>T</strong> 在编译期会被擦除为限定类型或 Object，通配符用于捕获具体类型。</li></ul><h4 id="extends-xxx-和-super-xxx-有什么区别"><a href="#extends-xxx-和-super-xxx-有什么区别" class="headerlink" title="? extends xxx 和 ? super xxx 有什么区别?"></a>? extends xxx 和 ? super xxx 有什么区别?</h4><p>两者接收参数的范围不同。并且，使用 ? extends xxx 声明的泛型参数只能调用 get() 方法返回 xxx 类型，调用 set() 报</p><p>错。使用 ? super xxx 声明的泛型参数只能调用 set() 方法接收 xxx 类型，调用 get() 报错。</p><h2 id="序列化-反序列化"><a href="#序列化-反序列化" class="headerlink" title="序列化/反序列化"></a>序列化/反序列化</h2><p>序列化：将数据结构或对象转换成二进制字节流的过程。</p><p>反序列化：将序列化过程中产生的二进制字节流转化为数据结构或对象的过程。</p><p><strong>序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。</strong></p><p>序列化和反序列化应用场景：</p><ul><li>对象进行网络传输之前进行序列化，接受到序列化对象之后进行反序列化；</li><li>对象存储到文件之前需要进行序列化，将对象从文件中取出需要进行反序列化；</li><li>对象存储到数据库（Redis）之前需要进行序列化，从数据库中取出对象现需要进行反序列化；</li><li>将对象存储到内存中之前需要进行序列化，从内存中取出对象需要进行反序列化。</li></ul><p><strong>不想进行序列化的变量，使用 <code>transient</code> 关键字修饰。</strong></p><h2 id="Java常见语法糖"><a href="#Java常见语法糖" class="headerlink" title="Java常见语法糖"></a>Java常见语法糖</h2><p>Java 中最常用的语法糖主要有<strong>泛型、自动拆装箱、变长参数、枚举、内部类、增强 for 循环、try-with-resources 语法、lambda 表达式</strong>等。</p><p>Java 中的 <code>for-each</code> 就是一个常用的语法糖。</p><h2 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h2><p>大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 <code>BigDecimal</code> 来做的。</p><p>​        <strong>浮点数之间的等值判断，基本数据类型不能用 == 来比较，包装数据类型不能用 equals 来判断。</strong><code>BigDecimal</code><strong>的等值比较应使用<code>compareTo（）</code>方法。</strong></p><h2 id="内部类-匿名内部类"><a href="#内部类-匿名内部类" class="headerlink" title="内部类/匿名内部类"></a>内部类/匿名内部类</h2><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230531160945240.png" alt="image-20230531160945240"></p><p>内部类就是类种类，依附于普通类中，可以间接实现Java类的多继承。</p><p><img src="C:\Users\chen\AppData\Roaming\Typora\typora-user-images\image-20230531162537638.png" alt="image-20230531162537638"></p><h2 id="Java常见运行时异常"><a href="#Java常见运行时异常" class="headerlink" title="Java常见运行时异常"></a>Java常见运行时异常</h2><p>ArrayStoreException：由于数组存储空间不够引起的异常；</p><p>NullPointerException：空指针异常，程序试图访问一个空的数组中的元素或访问空的对象中的方法或变量时产生异常；</p><p>IndexOutOfBoundsException：索引越界异常，由于数组下标越界或字符串访问越界引起异常；</p><p>ClassCastException：类型转换异常，当把一个对象归为某个类，但实际上此对象并不是由这个类创建的，也不是其子类创建的，则会引起异常；</p><p>NoSuchElementException：找不到元素异常；</p><p>ArithmeticException：算数运算异常，由于除数为0引起的异常；</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/posts/4.html"/>
      <url>/posts/4.html</url>
      
        <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="一、什么是线程池"><a href="#一、什么是线程池" class="headerlink" title="一、什么是线程池"></a><strong>一、什么是线程池</strong></h2><p>为什么要使用线程池</p><p>在开发中，为了提升效率的操作，我们需要将一些业务采用多线程的方式去执行。</p><p>比如有一个比较大的任务，可以将任务分成几块，分别交给几个线程去执行，最终做一个汇总就可以了。</p><p>比如做业务操作时，需要发送短信或者是发送邮件，这种操作也可以基于异步的方式完成，这种异步的方式，其实就是再构建一个线程去执行。</p><p>但是，如果每次异步操作或者多线程操作都需要新创建一个线程，使用完毕后，线程再被销毁，这样的话，对系统造成一些额外的开销。在处理过程中到底由多线程处理了多少个任务，以及每个线程的开销无法统计和管理。</p><p>所以咱们需要一个线程池机制来管理这些内容。线程池的概念和连接池类似，都是在一个Java的集合中存储大量的线程对象，每次需要执行异步操作或者多线程操作时，不需要重新创建线程，直接从集合中拿到线程对象直接执行方法就可以了。</p><p>JDK中就提供了线程池的类。</p><p>在线程池构建初期，可以将任务提交到线程池中。会根据一定的机制来异步执行这个任务。</p><ul><li>可能任务直接被执行</li><li>任务可以暂时被存储起来了。等到有空闲线程再来处理。</li><li>任务也可能被拒绝，无法被执行。</li></ul><p>JDK提供的线程池中记录了每个线程处理了多少个任务，以及整个线程池处理了多少个任务。同时还可以针对任务执行前后做一些勾子函数的实现。可以在任务执行前后做一些日志信息，这样可以多记录信息方便后面统计线程池执行任务时的一些内容参数等等……</p><h2 id="二、JDK自带的构建线程池的方式"><a href="#二、JDK自带的构建线程池的方式" class="headerlink" title="二、JDK自带的构建线程池的方式"></a>二、<strong>JDK自带的构建线程池的方式</strong></h2><p>JDK中基于Executors提供了很多种线程池</p><h3 id="2-1-newFixedThreadPool"><a href="#2-1-newFixedThreadPool" class="headerlink" title="2.1 newFixedThreadPool"></a>2.1 newFixedThreadPool</h3><p>这个线程池的特别是线程数是固定的。</p><p>在Executors中第一个方法就是构建newFixedThreadPool</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>            <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建时，需要给newFixedThreadPool方法提供一个nThreads的属性，而这个属性其实就是当前线程池中线程的个数。当前线程池的本质其实就是使用ThreadPoolExecutor。</p><p>构建好当前线程池后，线程个数已经固定好<strong>（线程是懒加载，在构建之初，线程并没有构建出来，而是随着人任务的提交才会将线程在线程池中国构建出来）</strong>。如果线程没构建，线程会待着任务执行被创建和执行。如果线程都已经构建好了，此时任务会被放到LinkedBlockingQueue无界队列中存放，等待线程从LinkedBlockingQueue中去take出任务，然后执行。</p><p>测试功能效果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1号任务："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2号任务："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3号任务："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-newSingleThreadExecutor"><a href="#2-2-newSingleThreadExecutor" class="headerlink" title="2.2 newSingleThreadExecutor"></a>2.2 newSingleThreadExecutor</h3><p>这个线程池看名字就知道是单例线程池，线程池中只有一个工作线程在处理任务</p><p>如果业务涉及到顺序消费，可以采用newSingleThreadExecutor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 当前这里就是构建单例线程池的方式</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>        <span class="token comment">// 在内部依然是构建了ThreadPoolExecutor，设置的线程个数为1</span>        <span class="token comment">// 当任务投递过来后，第一个任务会被工作线程处理，后续的任务会被扔到阻塞队列中</span>        <span class="token comment">// 投递到阻塞队列中任务的顺序，就是工作线程处理的顺序</span>        <span class="token comment">// 当前这种线程池可以用作顺序处理的一些业务中</span>        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">,</span>                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FinalizableDelegatedExecutorService</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatedExecutorService</span> <span class="token punctuation">{</span>    <span class="token comment">// 线程池的使用没有区别，跟正常的ThreadPoolExecutor没区别</span>    <span class="token class-name">FinalizableDelegatedExecutorService</span><span class="token punctuation">(</span><span class="token class-name">ExecutorService</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// finalize是当前对象被GC干掉之前要执行的方法</span>    <span class="token comment">// 当前FinalizableDelegatedExecutorService的目的是为了在当前线程池被GC回收之前</span>    <span class="token comment">// 可以执行shutdown，shutdown方法是将当前线程池停止，并且干掉工作线程</span>    <span class="token comment">// 但是不能基于这种方式保证线程池一定会执行shutdown</span>    <span class="token comment">// finalize在执行时，是守护线程，这种线程无法保证一定可以执行完毕。</span>    <span class="token comment">// 在使用线程池时，如果线程池是基于一个业务构建的，在使用完毕之后，一定要手动执行shutdown，</span>    <span class="token comment">// 否则会造成JVM中一堆线程</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试单例线程池效果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token string">"444"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试线程池使用完毕后，不执行shutdown的后果：</p><p>如果是局部变量仅限当前线程池使用的线程池，在使用完毕之后要记得执行shutdown，避免线程无法结束</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/e2c585e0a27945889b943c8954d84e54.png" alt="image.png"></p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/66fba14d8eba48008ba2f688d0a47507.png" alt="image.png"></p><p>如果是全局的线程池，很多业务都会到，使用完毕后不要shutdown，因为其他业务也要执行当前线程池</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/d94e335c71684a2cba4aa69cc104367f.png" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token function">newThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程池被回收了！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">newThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> i<span class="token punctuation">;</span>        threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-newCachedThreadPool"><a href="#2-3-newCachedThreadPool" class="headerlink" title="2.3 newCachedThreadPool"></a>2.3 newCachedThreadPool</h3><p>看名字好像是一个缓存的线程池，查看一下构建的方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span>                                  <span class="token number">60L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当第一次提交任务到线程池时，会直接构建一个工作线程</p><p>这个工作线程带执行完人后，60秒没有任务可以执行后，会结束</p><p>如果在等待60秒期间有任务进来，他会再次拿到这个任务去执行</p><p>如果后续提升任务时，没有线程是空闲的，那么就构建工作线程去执行。</p><p>最大的一个特点，<strong>任务只要提交到当前的newCachedThreadPool中，就必然有工作线程可以处理</strong></p><p>代码测试效果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-newScheduleThreadPool"><a href="#2-4-newScheduleThreadPool" class="headerlink" title="2.4 newScheduleThreadPool"></a>2.4 newScheduleThreadPool</h3><p>首先看到名字就可以猜到当前线程池是一个定时任务的线程池，而这个线程池就是可以以一定周期去执行一个任务，或者是延迟多久执行一个任务一次</p><p>查看一下如何构建的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>基于这个方法可以看到，构建的是ScheduledThreadPoolExecutor线程池</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledThreadPoolExecutor</span> <span class="token keyword">extends</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">{</span><span class="token comment">//....</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以本质上还是正常线程池，只不过在原来的线程池基础上实现了定时任务的功能</p><p>原理是基于DelayQueue实现的延迟执行。周期性执行是任务执行完毕后，再次扔回到阻塞队列。</p><p>代码查看使用的方式和效果</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">ScheduledExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 正常执行</span><span class="token comment">//        pool.execute(() -&gt; {</span><span class="token comment">//            System.out.println(Thread.currentThread().getName() + "：1");</span><span class="token comment">//        });</span>    <span class="token comment">// 延迟执行，执行当前任务延迟5s后再执行</span><span class="token comment">//        pool.schedule(() -&gt; {</span><span class="token comment">//            System.out.println(Thread.currentThread().getName() + "：2");</span><span class="token comment">//        },5,TimeUnit.SECONDS);</span>    <span class="token comment">// 周期执行，当前任务第一次延迟5s执行，然后没3s执行一次</span>    <span class="token comment">// 这个方法在计算下次执行时间时，是从任务刚刚开始时就计算。</span><span class="token comment">//        pool.scheduleAtFixedRate(() -&gt; {</span><span class="token comment">//            try {</span><span class="token comment">//                Thread.sleep(3000);</span><span class="token comment">//            } catch (InterruptedException e) {</span><span class="token comment">//                e.printStackTrace();</span><span class="token comment">//            }</span><span class="token comment">//            System.out.println(System.currentTimeMillis() + "：3");</span><span class="token comment">//        },2,1,TimeUnit.SECONDS);</span>    <span class="token comment">// 周期执行，当前任务第一次延迟5s执行，然后没3s执行一次</span>    <span class="token comment">// 这个方法在计算下次执行时间时，会等待任务结束后，再计算时间</span>    pool<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"：3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至于Executors提供的newSingleThreadScheduledExecutor单例的定时任务线程池就不说了。</p><p>一个线程的线程池可以延迟或者以一定的周期执行一个任务。</p><h3 id="2-5-newWorkStealingPool"><a href="#2-5-newWorkStealingPool" class="headerlink" title="2.5 newWorkStealingPool"></a>2.5 newWorkStealingPool</h3><p>当前JDK提供构建线程池的方式newWorkStealingPool和之前的线程池很非常大的区别</p><p>之前定长，单例，缓存，定时任务都基于ThreadPoolExecutor去实现的。</p><p>newWorkStealingPool是基于ForkJoinPool构建出来的</p><p><strong>ThreadPoolExecutor的核心点</strong>：</p><p>在ThreadPoolExecutor中只有一个阻塞队列存放当前任务</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/90707080cdaa42da91564df1b5aef45a.png" alt="image.png"><br>ForkJoinPool的核心特点：</p><p>ForkJoinPool从名字上就能看出一些东西。当有一个特别大的任务时，如果采用上述方式，这个大任务只能会某一个线程去执行。ForkJoin第一个特点是可以将一个大任务拆分成多个小任务，放到当前线程的阻塞队列中。其他的空闲线程就可以去处理有任务的线程的阻塞队列中的任务</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/b8dea88b3afd427583c789a9c76fa7fa.png" alt="image.png"></p><p>来一个比较大的数组，里面存满值，计算总和</p><p>单线程处理一个任务：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 非常大的数组 */</span><span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1_000_000_000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 填充值</span><span class="token keyword">static</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ===================单线程累加10亿数据================================</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单线程计算数组总和！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单线程运算结果为："</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"，计算时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end  <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多线程分而治之的方式处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 非常大的数组 */</span><span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">1_000_000_000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 填充值</span><span class="token keyword">static</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// ===================单线程累加10亿数据================================</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单线程计算数组总和！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单线程运算结果为："</span> <span class="token operator">+</span> sum <span class="token operator">+</span> <span class="token string">"，计算时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end  <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ===================多线程分而治之累加10亿数据================================</span>    <span class="token comment">// 在使用forkJoinPool时，不推荐使用Runnable和Callable</span>    <span class="token comment">// 可以使用提供的另外两种任务的描述方式</span>    <span class="token comment">// Runnable(没有返回结果) -&gt;   RecursiveAction</span>    <span class="token comment">// Callable(有返回结果)   -&gt;   RecursiveTask</span>    <span class="token class-name">ForkJoinPool</span> forkJoinPool <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ForkJoinPool</span><span class="token punctuation">)</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分而治之计算数组总和！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> forkJoinStart <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SumRecursiveTask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> result <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> forkJoinEnd <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分而治之运算结果为："</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">"，计算时间为："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>forkJoinEnd  <span class="token operator">-</span> forkJoinStart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SumRecursiveTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>    <span class="token comment">/** 指定一个线程处理哪个位置的数据 */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span>end<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_STRIDE</span> <span class="token operator">=</span> <span class="token number">100_000_000</span><span class="token punctuation">;</span>    <span class="token comment">//  200_000_000： 147964900</span>    <span class="token comment">//  100_000_000： 145942100</span>    <span class="token keyword">public</span> <span class="token class-name">SumRecursiveTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Integer</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在这个方法中，需要设置好任务拆分的逻辑以及聚合的逻辑</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> stride <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stride <span class="token operator">&lt;=</span> <span class="token constant">MAX_STRIDE</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 可以处理任务</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment">// 将任务拆分，分而治之。</span>            <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">// 声明为2个任务</span>            <span class="token class-name">SumRecursiveTask</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumRecursiveTask</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SumRecursiveTask</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumRecursiveTask</span><span class="token punctuation">(</span>middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 分别执行两个任务</span>            left<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            right<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 等待结果，并且获取sum</span>            sum <span class="token operator">=</span> left<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> right<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最终可以发现，这种累加的操作中，采用分而治之的方式效率提升了2倍多。</p><p>但是也不是所有任务都能拆分提升效率，首先任务得大，耗时要长。</p><h2 id="三、ThreadPoolExecutor应用-amp-源码剖析"><a href="#三、ThreadPoolExecutor应用-amp-源码剖析" class="headerlink" title="三、ThreadPoolExecutor应用&amp;源码剖析"></a>三、<strong>ThreadPoolExecutor应用&amp;源码剖析</strong></h2><p>前面讲到的Executors中的构建线程池的方式，大多数还是基于ThreadPoolExecutor去new出来的。</p><h3 id="3-1-为什么要自定义线程池"><a href="#3-1-为什么要自定义线程池" class="headerlink" title="3.1 为什么要自定义线程池"></a>3.1 为什么要自定义线程池</h3><p>首先ThreadPoolExecutor中，一共提供了7个参数，每个参数都是非常核心的属性，在线程池去执行任务时，每个参数都有决定性的作用。</p><p>但是如果直接采用JDK提供的方式去构建，可以设置的核心参数最多就两个，这样就会导致对线程池的控制粒度很粗。所以在阿里规范中也推荐自己去自定义线程池。手动的去new ThreadPoolExecutor设置他的一些核心属性。</p><p>自定义构建线程池，可以细粒度的控制线程池，去管理内存的属性，并且针对一些参数的设置可能更好的在后期排查问题。</p><p>查看一下ThreadPoolExecutor提供的七个核心参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>    <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>           <span class="token comment">// 核心工作线程（当前任务执行结束后，不会被销毁）</span>    <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>        <span class="token comment">// 最大工作线程（代表当前线程池中，一共可以有多少个工作线程）</span>    <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>         <span class="token comment">// 非核心工作线程在阻塞队列位置等待的时间</span>    <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>              <span class="token comment">// 非核心工作线程在阻塞队列位置等待时间的单位</span>    <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>   <span class="token comment">// 任务在没有核心工作线程处理时，任务先扔到阻塞队列中</span>    <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>         <span class="token comment">// 构建线程的线程工作，可以设置thread的一些信息</span>    <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 当线程池无法处理投递过来的任务时，执行当前的拒绝策略</span>    <span class="token comment">// 初始化线程池的操作</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-ThreadPoolExecutor应用"><a href="#3-2-ThreadPoolExecutor应用" class="headerlink" title="3.2 ThreadPoolExecutor应用"></a>3.2 ThreadPoolExecutor应用</h3><p>手动new一下，处理的方式还是执行execute或者submit方法。</p><p>JDK提供的几种拒绝策略：</p><ul><li><p>AbortPolicy：当前拒绝策略会在无法处理任务时，直接抛出一个异常</p><pre class="line-numbers language-none"><code class="language-none">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {    throw new RejectedExecutionException("Task " + r.toString() +                                         " rejected from " +                                         e.toString());}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CallerRunsPolicy：当前拒绝策略会在线程池无法处理任务时，将任务交给调用者处理</p><pre class="line-numbers language-none"><code class="language-none">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {    if (!e.isShutdown()) {        r.run();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>DiscardPolicy：当前拒绝策略会在线程池无法处理任务时，直接将任务丢弃掉</p><pre class="line-numbers language-none"><code class="language-none">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>DiscardOldestPolicy：当前拒绝策略会在线程池无法处理任务时，将队列中最早的任务丢弃掉，将当前任务再次尝试交给线程池处理</p><pre class="line-numbers language-none"><code class="language-none">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {    if (!e.isShutdown()) {        e.getQueue().poll();        e.execute(r);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义Policy：根据自己的业务，可以将任务扔到数据库，也可以做其他操作。</p><pre class="line-numbers language-none"><code class="language-none">private static class MyRejectedExecution implements RejectedExecutionHandler{    @Override    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {        System.out.println("根据自己的业务情况，决定编写的代码！");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>代码构建线程池，并处理有无返回结果的任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>    <span class="token comment">//1. 构建线程池</span>    <span class="token class-name">ThreadPoolExecutor</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>            <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                    thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test-ThreadPoolExecutor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> thread<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">MyRejectedExecution</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2. 让线程池处理任务,没返回结果</span>    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有返回结果的任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3. 让线程池处理有返回结果的任务</span>    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> threadPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我有返回结果！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"返回结果"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Object</span> result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4. 如果是局部变量的线程池，记得用完要shutdown</span>    threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRejectedExecution</span> <span class="token keyword">implements</span> <span class="token class-name">RejectedExecutionHandler</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">ThreadPoolExecutor</span> executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"根据自己的业务情况，决定编写的代码！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-ThreadPoolExecutor源码剖析"><a href="#3-3-ThreadPoolExecutor源码剖析" class="headerlink" title="3.3 ThreadPoolExecutor源码剖析"></a>3.3 ThreadPoolExecutor源码剖析</h3><p>线程池的源码内容会比较多一点，需要一点一点的去查看，内部比较多。</p><h4 id="3-3-1-ThreadPoolExecutor的核心属性"><a href="#3-3-1-ThreadPoolExecutor的核心属性" class="headerlink" title="3.3.1 ThreadPoolExecutor的核心属性"></a>3.3.1 ThreadPoolExecutor的核心属性</h4><p>核心属性主要就是ctl，基于ctl拿到线程池的状态以及工作线程个数</p><p>在整个线程池的执行流程中，会基于ctl判断上述两个内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 当前是线程池的核心属性</span><span class="token comment">// 当前的ctl其实就是一个int类型的数值，内部是基于AtomicInteger套了一层，进行运算时，是原子性的。</span><span class="token comment">// ctl表示着线程池中的2个核心状态：</span><span class="token comment">// 线程池的状态：ctl的高3位，表示线程池状态</span><span class="token comment">// 工作线程的数量：ctl的低29位，表示工作线程的个数</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token constant">RUNNING</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Integer.SIZE：在获取Integer的bit位个数</span><span class="token comment">// 声明了一个常量：COUNT_BITS = 29</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">COUNT_BITS</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">SIZE</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000001</span><span class="token number">00100000</span> <span class="token number">00000000</span> <span class="token number">00000000</span> <span class="token number">00000000</span><span class="token number">00011111</span> <span class="token number">11111111</span> <span class="token number">11111111</span> <span class="token number">11111111</span><span class="token comment">// CAPACITY就是当前工作线程能记录的工作线程的最大个数</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CAPACITY</span>   <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 线程池状态的表示</span><span class="token comment">// 当前五个状态中，只有RUNNING状态代表线程池没问题，可以正常接收任务处理</span><span class="token comment">// 111：代表RUNNING状态，RUNNING可以处理任务，并且处理阻塞队列中的任务。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">RUNNING</span>    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span><span class="token comment">// 000：代表SHUTDOWN状态，不会接收新任务，正在处理的任务正常进行，阻塞队列的任务也会做完。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">SHUTDOWN</span>   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span><span class="token comment">// 001：代表STOP状态，不会接收新任务，正在处理任务的线程会被中断，阻塞队列的任务一个不管。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STOP</span>       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span><span class="token comment">// 010：代表TIDYING状态，这个状态是否SHUTDOWN或者STOP转换过来的，代表当前线程池马上关闭，就是过渡状态。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TIDYING</span>    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span><span class="token comment">// 011：代表TERMINATED状态，这个状态是TIDYING状态转换过来的，转换过来只需要执行一个terminated方法。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">TERMINATED</span> <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token constant">COUNT_BITS</span><span class="token punctuation">;</span><span class="token comment">// 在使用下面这几个方法时，需要传递ctl进来</span><span class="token comment">// 基于&amp;运算的特点，保证只会拿到ctl高三位的值。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token constant">CAPACITY</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">// 基于&amp;运算的特点，保证只会拿到ctl低29位的值。</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">&amp;</span> <span class="token constant">CAPACITY</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线程池状态的特点以及转换的方式</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/9e8573ec5f5b4f1a9496e5795b773a44.png" alt="image.png"></p><h4 id="3-3-2-ThreadPoolExecutor的有参构造"><a href="#3-3-2-ThreadPoolExecutor的有参构造" class="headerlink" title="3.3.2 ThreadPoolExecutor的有参构造"></a>3.3.2 ThreadPoolExecutor的有参构造</h4><p>有参构造没啥说的，记住核心线程个数是允许为0的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 有参构造。无论调用哪个有参构造，最终都会执行当前的有参构造</span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                          <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 健壮性校验</span>    <span class="token comment">// 核心线程个数是允许为0个的。</span>    <span class="token comment">// 最大线程数必须大于0，最大线程数要大于等于核心线程数</span>    <span class="token comment">// 非核心线程的最大空闲时间，可以等于0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>        maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>        maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>        keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">// 不满足要求就抛出参数异常</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 阻塞队列，线程工厂，拒绝策略都不允许为null，为null就扔空指针异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> threadFactory <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不要关注当前内容，系统资源访问决策，和线程池核心业务关系不大。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 各种赋值，JUC包下，几乎所有涉及到线程挂起的操作，单位都用纳秒。</span>    <span class="token comment">// 有参构造的值，都赋值给成员变量。</span>    <span class="token comment">// Doug Lea的习惯就是将成员变量作为局部变量单独操作。</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-ThreadPoolExecutor的execute方法"><a href="#3-3-3-ThreadPoolExecutor的execute方法" class="headerlink" title="3.3.3 ThreadPoolExecutor的execute方法"></a>3.3.3 ThreadPoolExecutor的execute方法</h4><p>execute方法是提交任务到线程池的核心方法，很重要</p><p>线程池的执行流程其实就是在说execute方法内部做了哪些判断</p><p>execute源码的分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 提交任务到线程池的核心方法</span><span class="token comment">// command就是提交过来的任务</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 提交的任务不能为null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取核心属性ctl，用于后面的判断</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果工作线程个数，小于核心线程数。</span>    <span class="token comment">// 满足要求，添加核心工作线程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// addWorker(任务,是核心线程吗)</span>        <span class="token comment">// addWorker返回true：代表添加工作线程成功</span>        <span class="token comment">// addWorker返回false：代表添加工作线程失败</span>        <span class="token comment">// addWorker中会基于线程池状态，以及工作线程个数做判断，查看能否添加工作线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 工作线程构建出来了，任务也交给command去处理了。</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">// 说明线程池状态或者是工作线程个数发生了变化，导致添加失败，重新获取一次ctl</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 添加核心工作线程失败，往这走</span>    <span class="token comment">// 判断线程池状态是否是RUNNING，如果是，正常基于阻塞队列的offer方法，将任务添加到阻塞队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果任务添加到阻塞队列成功，走if内部</span>        <span class="token comment">// 如果任务在扔到阻塞队列之前，线程池状态突然改变了。</span>        <span class="token comment">// 重新获取ctl</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果线程池的状态不是RUNNING，将任务从阻塞队列移除，</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 并且直接拒绝策略</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在这，说明阻塞队列有我刚刚放进去的任务</span>        <span class="token comment">// 查看一下工作线程数是不是0个</span>        <span class="token comment">// 如果工作线程为0个，需要添加一个非核心工作线程去处理阻塞队列中的任务</span>        <span class="token comment">// 发生这种情况有两种：</span>        <span class="token comment">// 1. 构建线程池时，核心线程数是0个。</span>        <span class="token comment">// 2. 即便有核心线程，可以设置核心线程也允许超时，设置allowCoreThreadTimeOut为true，代表核心线程也可以超时</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment">// 为了避免阻塞队列中的任务饥饿，添加一个非核心工作线程去处理</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 任务添加到阻塞队列失败</span>    <span class="token comment">// 构建一个非核心工作线程</span>    <span class="token comment">// 如果添加非核心工作线程成功，直接完事，告辞</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 添加失败，执行决绝策略</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>execute方法的完整执行流程图</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/21bfed2ad43648b490292d59067142ea.png" alt="image.png"></p><h4 id="3-3-4-ThreadPoolExecutor的addWorker方法"><a href="#3-3-4-ThreadPoolExecutor的addWorker方法" class="headerlink" title="3.3.4 ThreadPoolExecutor的addWorker方法"></a>3.3.4 ThreadPoolExecutor的addWorker方法</h4><p>addWorker中主要分成两大块去看</p><ul><li>第一块：校验线程池的状态以及工作线程个数</li><li>第二块：添加工作线程并且启动工作线程</li></ul><p>校验线程池的状态以及工作线程个数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 添加工作线程之校验源码</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 外层for循环在校验线程池的状态</span>    <span class="token comment">// 内层for循环是在校验工作线程的个数</span>    <span class="token comment">// retry是给外层for循环添加一个标记，是为了方便在内层for循坏跳出外层for循环</span>    retry<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取ctl</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拿到ctl的高3位的值</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//==========================线程池状态判断==================================================</span>        <span class="token comment">// 如果线程池状态是SHUTDOWN，并且此时阻塞队列有任务，工作线程个数为0，添加一个工作线程去处理阻塞队列的任务</span>        <span class="token comment">// 判断线程池的状态是否大于等于SHUTDOWN，如果满足，说明线程池不是RUNNING</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&gt;=</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span>            <span class="token comment">// 如果这三个条件都满足，就代表是要添加非核心工作线程去处理阻塞队列任务</span>            <span class="token comment">// 如果三个条件有一个没满足，返回false，配合!，就代表不需要添加</span>            <span class="token operator">!</span><span class="token punctuation">(</span>rs <span class="token operator">==</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment">// 不需要添加工作线程</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//==========================工作线程个数判断================================================== </span>            <span class="token comment">// 基于ctl拿到低29位的值，代表当前工作线程个数   </span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果工作线程个数大于最大值了，不可以添加了，返回false</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">&gt;=</span> <span class="token constant">CAPACITY</span> <span class="token operator">||</span>                <span class="token comment">// 基于core来判断添加的是否是核心工作线程</span>                <span class="token comment">// 如果是核心：基于corePoolSize去判断</span>                <span class="token comment">// 如果是非核心：基于maximumPoolSize去判断</span>                wc <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 代表不能添加，工作线程个数不满足要求</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment">// 针对ctl进行 + 1，采用CAS的方式</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// CAS成功后，直接退出外层循环，代表可以执行添加工作线程操作了。</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>            <span class="token comment">// 重新获取一次ctl的值</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 判断重新获取到的ctl中，表示的线程池状态跟之前的是否有区别</span>            <span class="token comment">// 如果状态不一样，说明有变化，重新的去判断线程池状态</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                <span class="token comment">// 跳出一次外层for循环</span>                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 省略添加工作线程以及启动的过程</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加工作线程并且启动工作线程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 省略校验部分的代码</span>    <span class="token comment">// 添加工作线程以及启动工作线程~~~</span>    <span class="token comment">// 声明了三个变量</span>    <span class="token comment">// 工作线程启动了没，默认false</span>    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 工作线程添加了没，默认false</span>    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 工作线程，默认为null</span>    <span class="token class-name">Worker</span> w <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 构建工作线程，并且将任务传递进去</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取了Worker中的Thread对象</span>        <span class="token keyword">final</span> <span class="token class-name">Thread</span> t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>        <span class="token comment">// 判断Thread是否不为null，在new Worker时，内部会通过给予的ThreadFactory去构建Thread交给Worker</span>        <span class="token comment">// 一般如果为null，代表ThreadFactory有问题。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 加锁，保证使用workers成员变量以及对largestPoolSize赋值时，保证线程安全</span>            <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 再次获取线程池状态。</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 再次判断</span>                <span class="token comment">// 如果满足  rs &lt; SHUTDOWN  说明线程池是RUNNING，状态正常，执行if代码块</span>                <span class="token comment">// 如果线程池状态为SHUTDOWN，并且firstTask为null，添加非核心工作处理阻塞队列任务</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">||</span>                    <span class="token punctuation">(</span>rs <span class="token operator">==</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 到这，可以添加工作线程。</span>                    <span class="token comment">// 校验ThreadFactory构建线程后，不能自己启动线程，如果启动了，抛出异常</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// private final HashSet&lt;Worker&gt; workers = new HashSet&lt;Worker&gt;();</span>                    <span class="token comment">// 将new好的Worker添加到HashSet中。</span>                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 获取了HashSet的size，拿到工作线程个数</span>                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// largestPoolSize在记录最大线程个数的记录</span>                    <span class="token comment">// 如果当前工作线程个数，大于最大线程个数的记录，就赋值</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">&gt;</span> largestPoolSize<span class="token punctuation">)</span>                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                    <span class="token comment">// 添加工作线程成功</span>                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 如果工作线程添加成功，</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 直接启动Worker中的线程</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 启动工作线程成功</span>                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 做补偿的操作，如果工作线程启动失败，将这个添加失败的工作线程处理掉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>workerStarted<span class="token punctuation">)</span>            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 返回工作线程是否启动成功</span>    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 工作线程启动失败，需要不的步长操作</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 因为操作了workers，需要加锁</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果w不为null，之前Worker已经new出来了。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token comment">// 从HashSet中移除</span>            workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 同时对ctl进行 - 1，代表去掉了一个工作线程个数</span>        <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 因为工作线程启动失败，判断一下状态的问题，是不是可以走TIDYING状态最终到TERMINATED状态了。</span>        <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 释放锁</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-5-ThreadPoolExecutor的Worker工作线程"><a href="#3-3-5-ThreadPoolExecutor的Worker工作线程" class="headerlink" title="3.3.5 ThreadPoolExecutor的Worker工作线程"></a>3.3.5 ThreadPoolExecutor的Worker工作线程</h4><p>Worker对象主要包含了两个内容</p><ul><li>工作线程要执行任务</li><li>工作线程可能会被中断，控制中断</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Worker继承了AQS，目的就是为了控制工作线程的中断。</span><span class="token comment">// Worker实现了Runnable，内部的Thread对象，在执行start时，必然要执行Worker中断额一些操作</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>  <span class="token comment">// =======================Worker管理任务================================  </span>    <span class="token comment">// 线程工厂构建的线程</span>    <span class="token keyword">final</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">;</span>    <span class="token comment">// 当前Worker要执行的任务</span>    <span class="token class-name">Runnable</span> firstTask<span class="token punctuation">;</span>    <span class="token comment">// 记录当前工作线程处理了多少个任务。</span>    <span class="token keyword">volatile</span> <span class="token keyword">long</span> completedTasks<span class="token punctuation">;</span>    <span class="token comment">// 有参构造</span>    <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 将State设置为-1，代表当前不允许中断线程</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 任务赋值</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>        <span class="token comment">// 基于线程工作构建Thread，并且传入的Runnable是Worker</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 当thread执行start方法时，调用的是Worker的run方法，</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 任务执行时，执行的是runWorker方法</span>        <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">// =======================Worker管理中断================================   </span>    <span class="token comment">// 当前方法是中断工作线程时，执行的方法</span>    <span class="token keyword">void</span> <span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> t<span class="token punctuation">;</span>        <span class="token comment">// 只有Worker中的state &gt;= 0的时候，可以中断工作线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> thread<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果状态正常，并且线程未中断，这边就中断线程</span>                t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-6-ThreadPoolExecutor的runWorker方法"><a href="#3-3-6-ThreadPoolExecutor的runWorker方法" class="headerlink" title="3.3.6 ThreadPoolExecutor的runWorker方法"></a>3.3.6 ThreadPoolExecutor的runWorker方法</h4><p>runWorker就是让工作线程拿到任务去执行即可。</p><p>并且在内部也处理了在工作线程正常结束和异常结束时的处理方案</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 工作线程启动后执行的任务。</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 拿到当前线程</span>    <span class="token class-name">Thread</span> wt <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 从worker对象中拿到任务</span>    <span class="token class-name">Runnable</span> task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    <span class="token comment">// 将Worker中的firstTask置位空</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">// 将Worker中的state置位0，代表当前线程可以中断的</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// allow interrupts</span>    <span class="token comment">// 判断工作线程是否是异常结束，默认就是异常结束</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取任务</span>        <span class="token comment">// 直接拿到第一个任务去执行</span>        <span class="token comment">// 如果第一个任务为null，去阻塞队列中获取任务</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 执行了Worker的lock方法，当前在lock时，shutdown操作不能中断当前线程，因为当前线程正在处理任务</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 比较ctl &gt;= STOP,如果满足找个状态，说明线程池已经到了STOP状态甚至已经要凉凉了</span>            <span class="token comment">// 线程池到STOP状态，并且当前线程还没有中断，确保线程是中断的，进到if内部执行中断方法</span>            <span class="token comment">// if(runStateAtLeast(ctl.get(), STOP) &amp;&amp; !wt.isInterrupted()) {中断线程}</span>            <span class="token comment">// 如果线程池状态不是STOP，确保线程不是中断的。</span>            <span class="token comment">// 如果发现线程中断标记位是true了，再次查看线程池状态是大于STOP了，再次中断线程</span>            <span class="token comment">// 这里其实就是做了一个事情，如果线程池状态 &gt;= STOP，确保线程中断了。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>                <span class="token punctuation">(</span>                    <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span> <span class="token operator">||</span>                      <span class="token punctuation">(</span>     <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span>   <span class="token punctuation">)</span>                <span class="token punctuation">)</span>                <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment">// 勾子函数在线程池中没有做任何的实现，如果需要在线程池执行任务前后做一些额外的处理，可以重写勾子函数</span>                <span class="token comment">// 前置勾子函数</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Throwable</span> thrown <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment">// 执行任务。</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment">// 前后置勾子函数</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment">// 任务执行完，丢掉任务</span>                task <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 当前工作线程处理的任务数+1</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">// 执行unlock方法，此时shutdown方法才可以中断当前线程</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">// 如果while循环结束，正常走到这，说明是正常结束</span>        <span class="token comment">// 正常结束的话，在getTask中就会做一个额外的处理，将ctl - 1，代表工作线程没一个。</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 考虑干掉工作线程</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 工作线程结束前，要执行当前方法</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processWorkerExit</span><span class="token punctuation">(</span><span class="token class-name">Worker</span> w<span class="token punctuation">,</span> <span class="token keyword">boolean</span> completedAbruptly<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果是异常结束</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>completedAbruptly<span class="token punctuation">)</span>         <span class="token comment">// 将ctl - 1，扣掉一个工作线程</span>        <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 操作Worker，为了线程安全，加锁</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 当前工作线程处理的任务个数累加到线程池处理任务的个数属性中</span>        completedTaskCount <span class="token operator">+=</span> w<span class="token punctuation">.</span>completedTasks<span class="token punctuation">;</span>        <span class="token comment">// 将工作线程从hashSet中移除</span>        workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 释放锁</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 只要工作线程凉了，查看是不是线程池状态改变了。</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取ctl</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断线程池状态，当前线程池要么是RUNNING，要么是SHUTDOWN</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateLessThan</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果正常结束工作线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>completedAbruptly<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果核心线程允许超时，min = 0，否则就是核心线程个数</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> corePoolSize<span class="token punctuation">;</span>            <span class="token comment">// 如果min == 0，可能会出现没有工作线程，并且阻塞队列有任务没有线程处理</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 至少要有一个工作线程处理阻塞队列任务</span>                min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// 如果工作线程个数 大于等于1，不怕没线程处理，正常return</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> min<span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment">// 异常结束，为了避免出现问题，添加一个空任务的非核心线程来填补上刚刚异常结束的工作线程</span>        <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-7-ThreadPoolExecutor的getTask方法"><a href="#3-3-7-ThreadPoolExecutor的getTask方法" class="headerlink" title="3.3.7 ThreadPoolExecutor的getTask方法"></a>3.3.7 ThreadPoolExecutor的getTask方法</h4><p>工作线程在去阻塞队列获取任务前，要先查看线程池状态</p><p>如果状态没问题，去阻塞队列take或者是poll任务</p><p>第二个循环时，不但要判断线程池状态，还要判断当前工作线程是否可以被干掉</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 当前方法就在阻塞队列中获取任务</span><span class="token comment">// 前面半部分是判断当前工作线程是否可以返回null，结束。</span><span class="token comment">// 后半部分就是从阻塞队列中拿任务</span><span class="token keyword">private</span> <span class="token class-name">Runnable</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// timeOut默认值是false。</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token comment">// 死循环</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 拿到ctl</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拿到线程池的状态</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果线程池状态是STOP，没有必要处理阻塞队列任务，直接返回null</span>        <span class="token comment">// 如果线程池状态是SHUTDOWN，并且阻塞队列是空的，直接返回null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&gt;=</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span>                 <span class="token punctuation">(</span>rs <span class="token operator">&gt;=</span> <span class="token constant">STOP</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果可以返回null，先扣减工作线程个数</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 返回null，结束runWorker的while循环</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 基于ctl拿到工作线程个数</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 核心线程允许超时，timed为true</span>        <span class="token comment">// 工作线程个数大于核心线程数，timed为true</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">&gt;</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>            <span class="token comment">// 如果工作线程个数，大于最大线程数。（一般情况不会满足），把他看成false</span>            <span class="token comment">// 第二个判断代表，只要工作线程数小于等于核心线程数，必然为false</span>            <span class="token comment">// 即便工作线程个数大于核心线程数了，此时第一次循环也不会为true，因为timedOut默认值是false</span>            <span class="token comment">// 考虑第二次循环了，因为循环内部必然有修改timeOut的位置</span>            <span class="token punctuation">(</span>wc <span class="token operator">&gt;</span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span>             <span class="token comment">// 要么工作线程还有，要么阻塞队列为空，并且满足上述条件后，工作线程才会走到if内部，结束工作线程</span>            <span class="token punctuation">(</span>wc <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 第二次循环才有可能到这。</span>            <span class="token comment">// 正常结束，工作线程 - 1，因为是CAS操作，如果失败了，重新走for循环</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 工作线程从阻塞队列拿任务</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果是核心线程，timed是false，如果是非核心线程，timed就是true</span>            <span class="token class-name">Runnable</span> r <span class="token operator">=</span> timed <span class="token operator">?</span>                <span class="token comment">// 如果是非核心，走poll方法，拿任务，等待一会</span>                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span> <span class="token operator">:</span>                <span class="token comment">// 如果是核心，走take方法，死等。</span>                workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 从阻塞队列拿到的任务不为null，这边就正常返回任务，去执行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            <span class="token comment">// 说明当前线程没拿到任务，将timeOut设置为true，在上面就可以返回null退出了。</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-8-ThreadPoolExecutor的关闭方法"><a href="#3-3-8-ThreadPoolExecutor的关闭方法" class="headerlink" title="3.3.8 ThreadPoolExecutor的关闭方法"></a>3.3.8 ThreadPoolExecutor的关闭方法</h4><p>首先查看shutdownNow方法，可以从RUNNING状态转变为STOP</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// shutDownNow方法，shutdownNow不会处理阻塞队列的任务，将任务全部给你返回了。</span><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 声明返回结果</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> tasks<span class="token punctuation">;</span>    <span class="token comment">// 加锁</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 不关注这个方法……</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将线程池状态修改为STOP</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span><span class="token constant">STOP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 无论怎么，直接中断工作线程。</span>        <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将阻塞队列的任务全部扔到List集合中。</span>        tasks <span class="token operator">=</span> <span class="token function">drainQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment">// 释放锁</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> tasks<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 将线程池状态修改为STOP</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">advanceRunState</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token constant">STOP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 死循环。</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 获取ctl属性的值</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第一个判断：如果当前线程池状态已经大于等于STOP了，不管了，告辞。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">STOP</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token comment">// 基于CAS，将ctl从c修改为STOP状态，不修改工作线程个数，但是状态变为了STOP</span>            <span class="token comment">// 如果修改成功结束</span>            ctl<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token constant">STOP</span><span class="token punctuation">,</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 无论怎么，直接中断工作线程。</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 遍历HashSet，拿到所有的工作线程，直接中断。</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Worker</span> w <span class="token operator">:</span> workers<span class="token punctuation">)</span>            w<span class="token punctuation">.</span><span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 移除阻塞队列，内容全部扔到List集合中</span><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token function">drainQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> q <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> taskList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 阻塞队列自带的，直接清空阻塞队列，内容扔到List集合</span>    q<span class="token punctuation">.</span><span class="token function">drainTo</span><span class="token punctuation">(</span>taskList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 为了避免任务丢失，重新判断，是否需要编辑阻塞队列，重新扔到List</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Runnable</span> r <span class="token operator">:</span> q<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span>                taskList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> taskList<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 查看当前线程池是否可以变为TERMINATED状态</span><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 死循环。</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 拿到ctl</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果是RUNNING，直接告辞。</span>        <span class="token comment">// 如果状态已经大于等于TIDYING，马上就要凉凉，直接告辞。</span>        <span class="token comment">// 如果状态是SHUTDOWN，但是阻塞队列还有任务，直接告辞。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token constant">TIDYING</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">// 如果还有工作线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 再次中断工作线程</span>            <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token constant">ONLY_ONE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 告辞，等你工作线程全完事，我这再尝试进入到TERMINATED状态</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 加锁，为了可以执行Condition的释放操作</span>        <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>        mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 将线程池状态修改为TIDYING状态，如果成功，继续往下走</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token constant">TIDYING</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment">// 这个方法是空的，如果你需要在线程池关闭后做一些额外操作，这里你可以自行实现</span>                    <span class="token function">terminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token comment">// 最终修改为TERMINATED状态</span>                    ctl<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token constant">TERMINATED</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 线程池提供了一个方法，主线程在提交任务到线程池后，是可以继续做其他操作的。</span>                    <span class="token comment">// 咱们也可以让主线程提交任务后，等待线程池处理完毕，再做后续操作</span>                    <span class="token comment">// 这里线程池凉凉后，要唤醒哪些调用了awaitTermination方法的线程</span>                    termination<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// else retry on failed CAS</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次shutdown方法，可以从RUNNING状态转变为SHUTDOWN</p><p>shutdown状态下，不会中断正在干活的线程，而且会处理阻塞队列中的任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 加锁。。</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment">// 不看。</span>        <span class="token function">checkShutdownAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 里面是一个死循环，将线程池状态修改为SHUTDOWN</span>        <span class="token function">advanceRunState</span><span class="token punctuation">(</span><span class="token constant">SHUTDOWN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 中断空闲线程</span>        <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 说了，这个是为了ScheduleThreadPoolExecutor准备的，不管</span>        <span class="token function">onShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 尝试结束线程</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 中断空闲线程</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">interruptIdleWorkers</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> onlyOne<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 加锁</span>    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Worker</span> w <span class="token operator">:</span> workers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span> t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>            <span class="token comment">// 如果线程没有中断，那么就去获取Worker的锁，基于tryLock可知，不会中断正在干活的线程</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment">// 会中断空闲线程</span>                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>onlyOne<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-线程池的核心参数设计规则"><a href="#3-4-线程池的核心参数设计规则" class="headerlink" title="3.4 线程池的核心参数设计规则"></a>3.4 线程池的核心参数设计规则</h3><p>线程池的使用难度不大，难度在于线程池的参数并不好配置。</p><p>主要难点在于任务类型无法控制，比如任务有CPU密集型，还有IO密集型，甚至还有混合型的。</p><p>因为IO咱们无法直接控制，所以很多时间按照一些书上提供的一些方法，是无法解决问题的。</p><p>《Java并发编程实践》</p><p>想调试出一个符合当前任务情况的核心参数，最好的方式就是测试。</p><p>需要将项目部署到测试环境或者是沙箱环境中，结果各种压测得到一个相对符合的参数。</p><p>如果每次修改项目都需要重新部署，成本太高了。</p><p>此时咱们可以实现一个动态监控以及修改线程池的方案。</p><p>因为线程池的核心参数无非就是：</p><ul><li>corePoolSize：核心线程数</li><li>maximumPoolSize：最大线程数</li><li>workQueue：工作队列</li></ul><p>线程池中提供了获取核心信息的get方法，同时也提供了动态修改核心属性的set方法。</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/d52b31cb12654481b26a11ddb6e5e4d2.png" alt="image.png"></p><p>也可以采用一些开源项目提供的方式去做监控和修改</p><p>比如hippo4j就可以对线程池进行监控，而且可以和SpringBoot整合。</p><p>Github地址：<a href="https://github.com/opengoofy/hippo4j">https://github.com/opengoofy/hippo4j</a></p><p>官方文档：<a href="https://hippo4j.cn/docs/user_docs/intro">https://hippo4j.cn/docs/user_docs/intro</a></p><h3 id="3-5-线程池处理任务的核心流程"><a href="#3-5-线程池处理任务的核心流程" class="headerlink" title="3.5 线程池处理任务的核心流程"></a>3.5 线程池处理任务的核心流程</h3><p>基于addWorker添加工作线程的流程切入到整体处理任务的位置</p><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/2746/1661937858024/8d14ec0135f44a4c8dc42b39fb58bf16.png" alt="image.png"></p><h2 id="四、ScheduleThreadPoolExecutor应用-amp-源码"><a href="#四、ScheduleThreadPoolExecutor应用-amp-源码" class="headerlink" title="四、ScheduleThreadPoolExecutor应用&amp;源码"></a>四、<strong>ScheduleThreadPoolExecutor应用&amp;源码</strong></h2><h3 id="4-1-ScheduleThreadPoolExecutor介绍"><a href="#4-1-ScheduleThreadPoolExecutor介绍" class="headerlink" title="4.1 ScheduleThreadPoolExecutor介绍"></a>4.1 ScheduleThreadPoolExecutor介绍</h3><p>从名字上就可以看出，当前线程池是用于执行定时任务的线程池。</p><p>Java比较早的定时任务工具是Timer类。但是Timer问题很多，串行的，不靠谱，会影响到其他的任务执行。</p><p>其实除了Timer以及ScheduleThreadPoolExecutor之外，正常在企业中一般会采用Quartz或者是SpringBoot提供的Schedule的方式去实现定时任务的功能。</p><p>ScheduleThreadPoolExecutor支持延迟执行以及周期性执行的功能。</p><h3 id="4-2-ScheduleThreadPoolExecutor应用"><a href="#4-2-ScheduleThreadPoolExecutor应用" class="headerlink" title="4.2 ScheduleThreadPoolExecutor应用"></a>4.2 ScheduleThreadPoolExecutor应用</h3><p>定时任务线程池的有参构造</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                                   <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                                   <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NANOSECONDS</span><span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现ScheduleThreadPoolExecutor在构建时，直接调用了父类的构造方法</p><p>ScheduleThreadPoolExecutor的父类就是ThreadPoolExecutor</p><p>首先ScheduleThreadPoolExecutor最多允许设置3个参数：</p><ul><li>核心线程数</li><li>线程工厂</li><li>拒绝策略</li></ul><p>首先没有设置阻塞队列，以及最大线程数和空闲时间以及单位</p><p>阻塞队列设置的是DelayedWorkQueue，其实本质就是DelayQueue，一个延迟队列。DelayQueue是一个无界队列。所以最大线程数以及非核心线程的空闲时间是不需要设置的。</p><p>代码落地使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//1. 构建定时任务线程池</span>        <span class="token class-name">ScheduledThreadPoolExecutor</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">5</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> t<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//2. 应用ScheduledThreadPoolExecutor</span>        <span class="token comment">// 跟直接执行线程池的execute没啥区别</span>        pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 指定延迟时间执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"schedule"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 指定第一次的延迟时间，并且确认后期的周期执行时间，周期时间是在任务开始时就计算</span>        <span class="token comment">// 周期性执行就是将执行完毕的任务再次社会好延迟时间，并且重新扔到阻塞队列</span>        <span class="token comment">// 计算的周期执行，也是在原有的时间上做累加，不关注任务的执行时长。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"scheduleAtFixedRate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//        // 指定第一次的延迟时间，并且确认后期的周期执行时间，周期时间是在任务结束后再计算下次的延迟时间</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pool<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"scheduleWithFixedDelay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-ScheduleThreadPoolExecutor源码剖析"><a href="#4-3-ScheduleThreadPoolExecutor源码剖析" class="headerlink" title="4.3 ScheduleThreadPoolExecutor源码剖析"></a>4.3 ScheduleThreadPoolExecutor源码剖析</h3><h4 id="4-3-1-核心属性"><a href="#4-3-1-核心属性" class="headerlink" title="4.3.1 核心属性"></a>4.3.1 核心属性</h4><p>后面的方法业务流程会涉及到这些属性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这里是针对任务取消时的一些业务判断会用到的标记</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> continueExistingPeriodicTasksAfterShutdown<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> executeExistingDelayedTasksAfterShutdown <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> removeOnCancel <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 计数器，如果两个任务的执行时间节点一模一样，根据这个序列来判断谁先执行</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">AtomicLong</span> sequencer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这个方法是获取当前系统时间的毫秒值</span><span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 内部类。核心类之一。</span><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>        <span class="token keyword">extends</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">RunnableScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token comment">// 全局唯一的序列，如果两个任务时间一直，基于当前属性判断</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> sequenceNumber<span class="token punctuation">;</span>    <span class="token comment">// 任务执行的时间，单位纳秒</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> time<span class="token punctuation">;</span>    <span class="token comment">/**     *  period == 0：执行一次的延迟任务     *  period &gt; 0：代表是At     *  period &lt; 0：代表是With     */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> period<span class="token punctuation">;</span>    <span class="token comment">// 周期性执行时，需要将任务重新扔回阻塞队列，基础当前属性拿到任务，方便扔回阻塞队列</span>    <span class="token class-name">RunnableScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> outerTask <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 构建schedule方法的任务     */</span>    <span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">,</span> <span class="token keyword">long</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> ns<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>period <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sequenceNumber <span class="token operator">=</span> sequencer<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 构建At和With任务的有参构造     */</span>      <span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">,</span> <span class="token keyword">long</span> ns<span class="token punctuation">,</span> <span class="token keyword">long</span> period<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> ns<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>period <span class="token operator">=</span> period<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sequenceNumber <span class="token operator">=</span> sequencer<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token comment">// 内部类。核心类之一。</span><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DelayedWorkQueue</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token comment">// 这个类就是DelayQueue，不用过分关注，如果没看过，看阻塞队列中的优先级队列和延迟队列  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-schedule方法"><a href="#4-3-2-schedule方法" class="headerlink" title="4.3.2 schedule方法"></a>4.3.2 schedule方法</h4><p>execute方法也是调用的schedule方法，只不过传入的延迟时间是0纳秒</p><p>schedule方法就是将任务和延迟时间封装到一起，并且将任务扔到阻塞队列中，再去创建工作线程去take阻塞队列。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 延迟任务执行的方法。</span><span class="token comment">// command：任务</span><span class="token comment">// delay：延迟时间</span><span class="token comment">// unit：延迟时间的单位</span><span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">schedule</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span> <span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 健壮性校验。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> unit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将任务和延迟时间封装到一起，最终组成ScheduledFutureTask</span>    <span class="token comment">// 要分成三个方法去看</span>    <span class="token comment">// triggerTime：计算延迟时间。最终返回的是当前系统时间 + 延迟时间 </span>    <span class="token comment">// triggerTime就是将延迟时间转换为纳秒，并且+当前系统时间，再做一些健壮性校验</span>    <span class="token comment">// ScheduledFutureTask有参构造：将任务以及延迟时间封装到一起，并且设置任务执行的方式</span>    <span class="token comment">// decorateTask：当前方式是让用户基于自身情况可以动态修改任务的一个扩展口</span>    <span class="token class-name">RunnableScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> t <span class="token operator">=</span> <span class="token function">decorateTask</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>                                   <span class="token function">triggerTime</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 任务封装好，执行delayedExecute方法，去执行任务</span>    <span class="token function">delayedExecute</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回FutureTask</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// triggerTime做的事情</span><span class="token comment">// 外部方法，对延迟时间做校验，如果小于0，就直接设置为0</span><span class="token comment">// 并且转换为纳秒单位</span><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">triggerTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> delay<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">triggerTime</span><span class="token punctuation">(</span>unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span><span class="token punctuation">(</span>delay <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 将延迟时间+当前系统时间</span><span class="token comment">// 后面的校验是为了避免延迟时间超过Long的取值范围</span><span class="token keyword">long</span> <span class="token function">triggerTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>delay <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> delay <span class="token operator">:</span> <span class="token function">overflowFree</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// ScheduledFutureTask有参构造</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">,</span> <span class="token class-name">V</span> result<span class="token punctuation">,</span> <span class="token keyword">long</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// time就是任务要执行的时间</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>time <span class="token operator">=</span> ns<span class="token punctuation">;</span>    <span class="token comment">// period,为0，代表任务是延迟执行，不是周期执行</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>period <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 基于AtmoicLong生成的序列</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sequenceNumber <span class="token operator">=</span> sequencer<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// delayedExecute 执行延迟任务的操作</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">delayedExecute</span><span class="token punctuation">(</span><span class="token class-name">RunnableScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 查看当前线程池是否还是RUNNING状态，如果不是RUNNING，进到if</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">// 不是RUNNING。</span>        <span class="token comment">// 执行拒绝策略。</span>        <span class="token function">reject</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 线程池状态是RUNNING</span>        <span class="token comment">// 直接让任务扔到延迟的阻塞队列中</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// DCL的操作，再次查看线程池状态</span>        <span class="token comment">// 如果线程池在添加任务到阻塞队列后，状态不是RUNNING</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token comment">// task.isPeriodic()：现在反回的是false，因为任务是延迟执行，不是周期执行</span>            <span class="token comment">// 默认情况，延迟队列中的延迟任务，可以执行</span>            <span class="token operator">!</span><span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isPeriodic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token comment">// 从阻塞队列中移除任务。</span>            <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>            task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment">// 线程池状态正常，任务可以执行</span>            <span class="token function">ensurePrestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 线程池状态不为RUNNING，查看任务是否可以执行</span><span class="token comment">// 延迟执行：periodic==false</span><span class="token comment">// 周期执行：periodic==true</span><span class="token comment">// continueExistingPeriodicTasksAfterShutdown：周期执行任务，默认为false</span><span class="token comment">// executeExistingDelayedTasksAfterShutdown：延迟执行任务，默认为true</span><span class="token keyword">boolean</span> <span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> periodic<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">isRunningOrShutdown</span><span class="token punctuation">(</span>periodic <span class="token operator">?</span>                               continueExistingPeriodicTasksAfterShutdown <span class="token operator">:</span>                               executeExistingDelayedTasksAfterShutdown<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 当前情况，shutdownOK为true</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isRunningOrShutdown</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> shutdownOK<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果状态是RUNNING，正常可以执行，返回true</span>    <span class="token comment">// 如果状态是SHUTDOWN，根据shutdownOK来决定</span>    <span class="token keyword">return</span> rs <span class="token operator">==</span> <span class="token constant">RUNNING</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> <span class="token constant">SHUTDOWN</span> <span class="token operator">&amp;&amp;</span> shutdownOK<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 任务可以正常执行后，做的操作</span><span class="token keyword">void</span> <span class="token function">ensurePrestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 拿到工作线程个数</span>    <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 如果工作线程个数小于核心线程数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span>        <span class="token comment">// 添加核心线程去处理阻塞队列中的任务</span>        <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">// 如果工作线程数为0，核心线程数也为0，这是添加一个非核心线程去处理阻塞队列任务</span>        <span class="token function">addWorker</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-3-At和With方法-amp-任务的run方法"><a href="#4-3-3-At和With方法-amp-任务的run方法" class="headerlink" title="4.3.3 At和With方法&amp;任务的run方法"></a>4.3.3 At和With方法&amp;任务的run方法</h4><p>这两个方法在源码层面上的第一个区别，就是在计算周期时间时，需要将这个值传递给period，基于正负数在区别At和With</p><p>所以查看一个方法就ok，查看At方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// At方法，</span><span class="token comment">// command：任务</span><span class="token comment">// initialDelay：第一次执行的延迟时间</span><span class="token comment">// period：任务的周期执行时间</span><span class="token comment">// unit：上面两个时间的单位</span><span class="token keyword">public</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> command<span class="token punctuation">,</span>                                              <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>                                              <span class="token keyword">long</span> period<span class="token punctuation">,</span>                                              <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 健壮性校验</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> unit <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 周期时间不能小于等于0.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>period <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将任务以及第一次的延迟时间，和后续的周期时间封装好。</span>    <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> sft <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ScheduledFutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>command<span class="token punctuation">,</span>                                      <span class="token keyword">null</span><span class="token punctuation">,</span>                                      <span class="token function">triggerTime</span><span class="token punctuation">(</span>initialDelay<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">,</span>                                      unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 扩展口，可以对任务做修改。</span>    <span class="token class-name">RunnableScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> t <span class="token operator">=</span> <span class="token function">decorateTask</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> sft<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 周期性任务，需要在任务执行完毕后，重新扔会到阻塞队列，为了方便拿任务，将任务设置到outerTask成员变量中</span>    sft<span class="token punctuation">.</span>outerTask <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token comment">// 和schedule方法一样的方式</span>    <span class="token comment">// 如果任务刚刚扔到阻塞队列，线程池状态变为SHUTDOWN，默认情况，当前任务不执行</span>    <span class="token function">delayedExecute</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 延迟任务以及周期任务在执行时，都会调用当前任务的run方法。</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// periodic == false：一次性延迟任务</span>    <span class="token comment">// periodic == true：周期任务</span>    <span class="token keyword">boolean</span> periodic <span class="token operator">=</span> <span class="token function">isPeriodic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 任务执行前，会再次判断状态，能否执行任务</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span>periodic<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 判断是周期执行还是一次性任务</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>periodic<span class="token punctuation">)</span>        <span class="token comment">// 一次性任务，让工作线程直接执行command的逻辑</span>        <span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 到这个else if，说明任务是周期执行</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ScheduledFutureTask</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">runAndReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 设置下次任务执行的时间</span>        <span class="token function">setNextRunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将任务重新扔回线程池做处理</span>        <span class="token function">reExecutePeriodic</span><span class="token punctuation">(</span>outerTask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 设置下次任务执行的时间</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setNextRunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 拿到period值，正数：At，负数：With</span>    <span class="token keyword">long</span> p <span class="token operator">=</span> period<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment">// 拿着之前的执行时间，直接追加上周期时间</span>        time <span class="token operator">+=</span> p<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">// 如果走到else，代表任务是With方式，这种方式要重新计算延迟时间</span>        <span class="token comment">// 拿到当前系统时间，追加上延迟时间，</span>        time <span class="token operator">=</span> <span class="token function">triggerTime</span><span class="token punctuation">(</span><span class="token operator">-</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 将任务重新扔回线程池做处理</span><span class="token keyword">void</span> <span class="token function">reExecutePeriodic</span><span class="token punctuation">(</span><span class="token class-name">RunnableScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果状态ok，可以执行</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 将任务扔到延迟队列</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// DCL，判断线程池状态</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>            task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment">// 添加工作线程</span>            <span class="token function">ensurePrestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客诞生</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<p>相遇皆是缘分</p><h3 id="为什么建博客？"><a href="#为什么建博客？" class="headerlink" title="为什么建博客？"></a>为什么建博客？</h3><p>肿么说了! 纯属个人兴趣，好玩，唉，就是玩!嘻嘻! 会有些成就感吧,拥有一个自己的博客写一些自己感兴趣的事或物,不是一件很酷的事嘛!</p><h3 id="展望博客"><a href="#展望博客" class="headerlink" title="展望博客"></a>展望博客</h3><p>我会整理一些个人所学的知识或生活方面有兴趣的事发到博客上供大家观摩</p><h3 id="关于博主"><a href="#关于博主" class="headerlink" title="关于博主"></a>关于博主</h3><p>有位可爱的（小）朋友，给我取名叫 “仙气”，这是也是我博客上自居 “仙气” 的由来。喜欢自己所喜欢的，做自己想做的，追求自由与潇洒，多酷啊！ 想法是美好的，可现实… …   给大家推荐一首诗吧</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> 《自由与爱情》---作者:裴多菲​ 生命诚可贵​ 爱情价更高​ 若为自由故​ 二者皆可抛<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>溜溜球啦！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 想法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
